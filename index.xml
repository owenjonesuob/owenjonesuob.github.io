<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Products of Procrastination</title>
<link>https://owenjonesuob.github.io/</link>
<atom:link href="https://owenjonesuob.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>I&#39;m a data scientist/engineer living in Cardiff, United Kingdom. This is a collection of projects I have spent time on while I was supposed to be doing other things.</description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Sat, 27 Apr 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Use deploy keys to access private repos within GitHub Actions</title>
  <link>https://owenjonesuob.github.io/posts/2024-04-27-use-deploy-keys-to-access-private-repos-within-github-actions/</link>
  <description><![CDATA[ 





<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Suppose you have a GitHub Actions <a href="https://docs.github.com/en/actions/using-workflows/about-workflows">workflow</a> called <code>your-workflow</code>, within a repository called <code>your-repo</code>.</p>
<p>Then suppose that for some reason (see Why would I ever need to do this?), within that workflow, you need to get hold of <em>another</em> repo - let’s call it <code>your-extra-repo</code>.</p>
<p>That’s easy enough if <code>your-extra-repo</code> is a public repo: you can “just” use the GitHub-provided <a href="https://github.com/actions/checkout"><code>actions/checkout</code></a> action multiple times within your workflow.</p>
<p>But what if it’s <em>not</em> a public repo?</p>
<p>There are a few possible approaches<sup>1</sup> - I’m going to explain my preferred one here.</p>
</section>
<section id="deploy-keys" class="level2">
<h2 class="anchored" data-anchor-id="deploy-keys">Deploy keys</h2>
<p>A <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#deploy-keys">deploy key</a> is an SSH key that you can attach to a single GitHub repository, and which provides access to just that repository.</p>
<p>We can use a deploy key as the core part of our solution. It’s an ideal choice here because it allows us to create a very specific access route:</p>
<ul>
<li>From the GitHub Actions runner which executes <code>your-workflow</code></li>
<li>To the non-public <code>your-extra-repo</code></li>
<li>With read-only permissions (you <em>can</em> add write permissions, but we shouldn’t for this particular purpose)</li>
</ul>
<p>Here’s how I usually set things up:</p>
<ol type="1">
<li><p>Create a new SSH keypair - it doesn’t matter what method you use to create it. I’d suggest using the following command in a terminal (a Linux terminal, or the RStudio Terminal, or Windows PowerShell…):</p>
<pre class="console"><code>ssh-keygen -t ed25519 -f deploy</code></pre>
<p>If you’re prompted, don’t set a passphrase. This will create two files in your current working called <code>deploy.pub</code> and <code>deploy</code>, containing the public and private parts respectively of a new SSH key.</p></li>
<li><p>In GitHub, navigate to <code>your-extra-repo</code>. In the <code>Settings</code> tab, find <code>Security &gt; Deploy keys</code>. Create a new deploy key:</p>
<ul>
<li><code>Title</code> - up to you, but I tend to call it something like <code>your-repo-your-workflow</code><sup>2</sup></li>
<li><code>Key</code> - this must be the <strong>public</strong> part of the SSH key you just created (you can open <code>deploy.pub</code> and copy the entire contents)</li>
</ul></li>
<li><p>Now navigate to the GitHub page for <code>your-repo</code>. In the <code>Settings</code> tab, find <code>Security &gt; Secrets and variables &gt; Actions</code>. Add a repository secret:</p>
<ul>
<li><code>Name</code> - again up to you, but I tend to use the pattern <code>YOUR_EXTRA_REPO_DEPLOY_KEY</code></li>
<li><code>Value</code> - this must be the <strong>private</strong> part of the SSH key you just created (you can open <code>deploy</code> and copy the entire contents)</li>
</ul></li>
<li><p>Delete both parts of the key from wherever you created it (e.g.&nbsp;delete <code>deploy.pub</code> and <code>deploy</code>) - we don’t need these any more!</p></li>
</ol>
<p>You can follow these same steps to make more than one private repo accessible from <code>your-workflow</code> - if you do, you should create &amp; use a different deploy key for each one.</p>
</section>
<section id="why-would-i-ever-need-to-do-this" class="level2">
<h2 class="anchored" data-anchor-id="why-would-i-ever-need-to-do-this">Why would I ever need to do this?</h2>
<p>So far, I’ve come across two different cases where this trick can be handy!</p>
<section id="case-1-git-submodules" class="level3">
<h3 class="anchored" data-anchor-id="case-1-git-submodules">Case 1: git submodules</h3>
<p>Suppose <code>your-repo</code> contains a git submodule which lives in a private repo <code>your-extra-repo</code>, and that you need to get to something provided by that submodule within <code>your-workflow</code>.</p>
<p>(For a concrete example of this, see my previous post about <a href="../../posts/2024-04-16-modular-r-code-for-analytical-projects-with-box/index.html">modular R code with {box}</a>.)</p>
<p>The GitHub-provided <a href="https://github.com/actions/checkout"><code>actions/checkout</code></a> action is typically used to check out the current repo within a GitHub Actions workflow. And at first glance, the solution looks simple.</p>
<p>The <code>actions/checkout</code> action takes some optional parameters:</p>
<ul>
<li><code>submodules</code> - whether to check out submodules (default <code>false</code>)</li>
</ul>
<p>So can we just specify <code>submodules: true</code>?</p>
<p>Unfortunately not, because the submodule we want is in a private repo; we’ll need to provide some way of verifying that we’re allowed to access it.</p>
<p>Ah-ha! we say, look, here’s another handy optional parameter:</p>
<ul>
<li><code>ssh-key</code> - if provided, it is used to fetch the specified repository (instead of fetching via HTTPS with the <code>github.token</code> generated for the workflow run)</li>
</ul>
<p>So can we just pass our shiny new deploy key to this parameter via a GitHub secret?</p>
<p>Again, we quickly hit a problem: it seems that if you provide <code>ssh-key</code>, it is used for <em>all</em> git operations within the checkout action. So if we pass in a deploy key, we end up trying to use that deploy key to clone <code>your-repo</code> too, leading to failure (remember the whole point of a deploy key is that it allows access to one single repo, <code>your-extra-repo</code> in this case).</p>
<p>So ideally, we’d like to do a “normal” checkout for <code>your-repo</code>, but a special SSH checkout for <code>your-extra-repo</code>…</p>
<p>The trick isn’t too complicated - in fact, it’s adapted from a scenario anticipated by the <code>actions/checkout</code> repo’s <a href="https://github.com/actions/checkout/blob/main/README.md#Checkout-multiple-repos-private">README file</a>:</p>
<ol type="1">
<li>Use an <code>actions/checkout</code> step to check out <code>your-repo</code> as usual</li>
<li>Use <em>another</em> <code>actions/checkout</code> step to check out the <code>your-extra-repo</code> submodule, taking advantage of some more optional parameters:
<ul>
<li><code>repository</code> - which repository to check out (default is the repo which the workflow belongs to, but we’ll ask for <code>your-extra-repo</code> instead)</li>
<li><code>path</code> - the location to check out to within <code>your-repo</code> (the default is <code>.</code>, but a submodule typically lives within a subdirectory, i.e.&nbsp;you probably don’t want to check out <code>your-extra-repo</code> right on top of <code>your-repo</code>)</li>
<li><code>ssh-key</code> - we’ve met this already! We’ll use it here to pass through the private half of the deploy key we set up previously</li>
</ul></li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">some-job-name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Checkout this repo</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v4</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">submodules</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Checkout your-extra-repo submodule</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v4</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repository</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> your-user-or-org/your-extra-repo</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh-key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.YOUR_EXTRA_REPO_DEPLOY_KEY }}</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./path/to/submodule</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      # More steps...</span></span></code></pre></div>
<p>Note: the explicit <code>submodules: false</code> isn’t required since <code>false</code> is the default, but I think it suggests to the casual reader that there’s <em>something</em> funky and submodule-related going on…)</p>
</section>
<section id="case-2-pre-commit-hooks" class="level3">
<h3 class="anchored" data-anchor-id="case-2-pre-commit-hooks">Case 2: pre-commit hooks</h3>
<p>We use <a href="https://pre-commit.com/">pre-commit</a> in several of our team’s repos. For these repos, we also set up a GitHub Actions workflow to run pre-commit whenever a pull request is opened or updated. I won’t go into too much detail here, as that’s probably worthy of its own post sometime!</p>
<p>As well as using some hooks from public repos, we have a handful of custom “team hooks” in an internal<sup>3</sup> repo within our GitHub organisation.</p>
<p>The problem is that under the hood, pre-commit uses git to get hold of the various hook-supplying repos. So once again, we need some way of using a “regular” checkout for public repos, and then a “non-regular” checkout for our internal repo.</p>
<p>This time, the trick is in two parts:</p>
<ol type="1">
<li><p>In <code>your-repo</code>, in the <code>.pre-commit-config.yaml</code> file, use HTTPS-format repo URLs for public repos, and an SSH-format URL for the internal repo:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repos</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/pre-commit/pre-commit-hooks</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v4.5.0</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> trailing-whitespace</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> end-of-file-fixer</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> https://github.com/lorenzwalthert/precommit</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v0.4.1</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> parsable-R</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">repo</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> git@github.com:your-user-or-org/your-extra-repo</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> v0.0.1</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hooks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> your-first-hook</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">id</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> your-second-hook</span></span></code></pre></div></li>
<li><p>In your GitHub Actions workflow, copy the private half of the deploy key from the relevant GitHub secret into a keyfile, and then tell pre-commit to use that SSH key for all SSH operations executed by git:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v4</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch-depth</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/setup-python@v5</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install dependencies</span></span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">      run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb4-14">        python -m pip install --upgrade pip pre-commit</span>
<span id="cb4-15"></span>
<span id="cb4-16">        # Set up SSH access for some-private-repo</span>
<span id="cb4-17">        mkdir -p ~/.ssh/</span>
<span id="cb4-18">        echo "${{ secrets.SOME_PRIVATE_REPO_DEPLOY_KEY }}" &gt; ~/.ssh/deploy-key</span>
<span id="cb4-19">        chmod 600 ~/.ssh/deploy-key</span>
<span id="cb4-20">        ssh-keyscan -H github.com &gt;&gt; ~/.ssh/known_hosts</span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Run pre-commit</span></span>
<span id="cb4-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">      run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb4-24">        GIT_SSH_COMMAND='ssh -i ~/.ssh/deploy-key -o IdentitiesOnly=yes' \</span>
<span id="cb4-25">          pre-commit run \</span>
<span id="cb4-26">          --from-ref ${{ github.event.pull_request.base.sha }} \</span>
<span id="cb4-27">          --to-ref ${{ github.event.pull_request.head.sha }}</span></code></pre></div></li>
</ol>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>At the time of writing, this mammoth GitHub issue contains an ongoing discussion: <a href="https://github.com/actions/checkout/issues/287" class="uri">https://github.com/actions/checkout/issues/287</a>↩︎</p></li>
<li id="fn2"><p>This naming pattern helps to make it clear, if you are ever tidying up your deploy keys, which key was used where.↩︎</p></li>
<li id="fn3"><p>You can interchange “private” and “internal” throughout this post - the key thing is that both are “non-public”.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://owenjonesuob.github.io/posts/2024-04-27-use-deploy-keys-to-access-private-repos-within-github-actions/</guid>
  <pubDate>Sat, 27 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2024-04-27-use-deploy-keys-to-access-private-repos-within-github-actions/key.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Modular R code for analytical projects with {box}</title>
  <link>https://owenjonesuob.github.io/posts/2024-04-16-modular-r-code-for-analytical-projects-with-box/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I work with a team of data scientists and statistical modellers, and we do pretty much everything in R.</p>
<p>We work on all sorts of projects; I wanted to share a really useful pattern that we’ve developed to help us write better code across all of those projects, and a little bit of the reasoning behind it!</p>
</section>
<section id="modular-r-code" class="level2">
<h2 class="anchored" data-anchor-id="modular-r-code">Modular R code</h2>
<p>Plenty of code we write ends up being useful in multiple places. So ideally, we want to make sure our code is:</p>
<ul>
<li>easy to <strong>reproduce</strong> - in particular, it should be clear when code depends on other code</li>
<li>easy to <strong>maintain</strong> - if we need to change how something works, we want to make changes in as few places as possible</li>
<li>easy to <strong>find</strong> - if we know a certain piece of functionality exists already, we shouldn’t have to search too hard to find it</li>
</ul>
<p>Together, these concepts form the basis of <strong>modular</strong> code: that is, keeping related functionality grouped together, and having a sensible way of declaring dependencies in your code.</p>
<p>One solution to this problem would be to turn any “modularisable” code within a project into an R package. And that is absolutely a good approach, and absolutely doable, but it does have a couple of drawbacks:</p>
<ul>
<li>It requires a bit of additional knowledge, namely how to construct R packages - which actually isn’t too tricky, this is barely a drawback</li>
<li>The package needs to be reinstalled after any updates - again, not arduous, but slight additional friction</li>
<li>We would need to choose a package name - this is <em>hard</em></li>
</ul>
<p>I’m not joking. Choosing a package name can be really difficult - which actually is often a symptom of the potential package not having a well-defined scope. I think this is especially true of analytical projects, where there are often multiple “scopes” involved (e.g.&nbsp;importing data, processing, producing outputs…) - and, from bitter experience, where these scopes can change or expand quite dramatically as the project progresses.</p>
<p>So ideally we want all the benefits of modular code, without the restrictions implied by having to fit our code into a formal package.</p>
<p>Luckily, there’s a package for that…</p>
</section>
<section id="what-is-box" class="level2">
<h2 class="anchored" data-anchor-id="what-is-box">What is {box}?</h2>
<p>It’s an R package providing a framework which makes it easier to write modular code. The <code>box::use()</code> function is used to declare when one piece of code is dependent on another - kind of like <code>source()</code>, but without dumping everything into the global environment.</p>
<p>If you haven’t come across {box} before, I’d really strongly encourage you to pause here and go take a quick look at the <a href="https://klmr.me/box/">package website</a> to see how it works. It’s awesome.</p>
<p>On its own, it is already immensely useful within the context of a single project. But let me share a couple of additional ideas that revolutionised how we write modular code <em>across multiple projects</em>.</p>
</section>
<section id="defining-module-types" class="level2">
<h2 class="anchored" data-anchor-id="defining-module-types">Defining module types</h2>
<p>As we began using {box} more and more to structure our code, we realised that we tended to end up three different “types” of module, distinguished by where they were being used…</p>
<section id="general-modules---box" class="level4">
<h4 class="anchored" data-anchor-id="general-modules---box">General modules - [box/*]</h4>
<p>These contain functionality which is useful across multiple projects. For example, we often need to work with our AWS Redshift data warehouse - so we have a general module called [box/redshift], which contains utility functions that make it easier to connect to &amp; work with the data warehouse. We develop these modules in their own repo, and include them within other projects via a git submodule - I promise that’s not as scary as it sounds, bear with me!</p>
</section>
<section id="project-modules---prj" class="level4">
<h4 class="anchored" data-anchor-id="project-modules---prj">Project modules - [prj/*]</h4>
<p>These are used within a single project, and are unique to that project’s context. For example, a [prj/data] module might contain functions to fetch project-specific data from various places, and then a [prj/plots] module might contain functions to create certain project-specific graphs using that data. If anything ends up being more broadly useful, it might be “promoted” into a general module.</p>
</section>
<section id="local-modules---." class="level4">
<h4 class="anchored" data-anchor-id="local-modules---.">Local modules - [./*]</h4>
<p>These are specific to the context of a particular set of files. They can be useful for keeping interdependent code neatly organised within a directory: code can be split into multiple files, with a “declaration of dependence” specified at the top of each file (via <code>box::use()</code>) which ensures it’s easy to keep track of what depends on what. These can be handy while actively developing new code, but it’s often worth upgrading local modules to project modules if possible.</p>
</section>
</section>
<section id="automatically-setting-the-box-search-path-for-a-project" class="level2">
<h2 class="anchored" data-anchor-id="automatically-setting-the-box-search-path-for-a-project">Automatically setting the {box} search path for a project</h2>
<p>{box} finds modules by following a “search path”, which we can set in one of the following ways:</p>
<ul>
<li><code>options("box.path")</code> - a vector of paths where modules can be found; like <code>.libPaths()</code> for R packages</li>
<li><code>R_BOX_PATH</code> environment variable - a single string; like <code>$PATH</code> for system commands</li>
</ul>
<p>(There’s more info about this in the <a href="https://klmr.me/box/reference/use.html?q=path#search-path">package docs</a>.)</p>
<p>Let’s assume that we’re working on a project which lives in its own folder. In our case, each of our team’s projects lives in its own git repo, and we work with those via <a href="https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects">RStudio projects</a>.</p>
<p>Then we can use the project’s <a href="https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf"><code>.Rprofile</code> file</a> to set the {box} search path when we start an R session in that directory (e.g.&nbsp;by opening the associated RStudio project).</p>
</section>
<section id="bringing-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="bringing-it-all-together">Bringing it all together</h2>
<p>So with all of that in mind, here’s the general approach we follow for setting up a new project which will use {box} modules:</p>
<ol type="1">
<li><p>In the project repo where you would like to use modules, create a subdirectory to store them, e.g.&nbsp;<code>src/R/</code>:</p>
<pre><code> $ # From the project's root directory
 $ mkdir -p src/R/</code></pre></li>
<li><p>Add your “general modules” repo as a git submodule, in a <code>box/</code> directory within that new subdirectory:</p>
<pre><code> $ git submodule add [general modules repo's URL] src/R/box</code></pre></li>
<li><p>Create a <code>prj/</code> directory alongside the <code>box/</code> directory, to store project modules:</p>
<pre><code> $ mkdir src/R/prj/</code></pre></li>
<li><p>Update the project’s <code>.Rprofile</code> file to set the <code>box.path</code> R option, and (optionally) to ensure that the general-modules submodule is updated to the appropriate point in its history when your project is opened:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Local box path</span></span>
<span id="cb4-3">  box_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update existing box path (e.g. a path set by Rprofile.site)</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box.path"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(box_path, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getOption</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box.path"</span>)))</span>
<span id="cb4-7"></span>
<span id="cb4-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure box submodule is pulled in at correct ref</span></span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"git"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submodule"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"update"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--init"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--recursive"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(box_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"box"</span>)))</span>
<span id="cb4-10">})</span></code></pre></div></li>
<li><p>If at any point you want to update the submodule to include the latest changes from the general repo, you’ll need to run the following from within your project repo (amend the submodule path if necessary):</p>
<pre><code>$ git submodule update --remote --recursive -- src/R/box</code></pre>
<p>This will update the reference which Git uses to fetch the submodule contents. You’ll need to commit the updated reference to your project repo (i.e.&nbsp;add and commit your <code>src/R/box</code> “directory”, which is actually just a small file containing that reference!).</p></li>
</ol>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Please do borrow, adapt, and improve on these ideas - if you try using this same pattern, or if you come up with any additions/alternatives to it, I’d really love to hear about it!</p>
<p>And if you enjoyed this, I promise I’ve got plenty more {box} content that I could find time to write about…</p>


</section>

 ]]></description>
  <guid>https://owenjonesuob.github.io/posts/2024-04-16-modular-r-code-for-analytical-projects-with-box/</guid>
  <pubDate>Tue, 16 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2024-04-16-modular-r-code-for-analytical-projects-with-box/box_logo.png" medium="image" type="image/png" height="166" width="144"/>
</item>
<item>
  <title>New blog, who dis?</title>
  <link>https://owenjonesuob.github.io/posts/2024-04-12-new-blog-who-dis/</link>
  <description><![CDATA[ 





<p>Hey folks, it’s been a while!</p>
<p>I did the thing from the meme and, having logged on intending to write a short blog post, ended up moving my entire blog to a new platform.</p>
<p>I have zero regrets about this - the previous handcrafted site was fun to build in the first place (many years ago now…); but I couldn’t face re-learning how to build &amp; deploy with Jekyll <em>againnnn</em> on yet another laptop. So instead, here’s a shiny new <a href="https://quarto.org/">Quarto</a>-built site, tada!!</p>
<p>Particular thanks go to <a href="https://robjhyndman.com/hyndsight/disqus2giscus.html">Rob J Hyndman</a> and <a href="https://masalmon.eu/2019/10/02/disqus/">Maëlle Salmon</a> for their super handy posts about migrating comments from Disqus.</p>
<p>There are probably some rough edges that I’ve missed - dead links, dodgy formatting… please point me towards anything particularly ugly and I’ll get it patched up.</p>
<p>And I promise that more actual gloriously content-filled blog posts <em>will</em> actually happen now. Stay tuned!</p>



 ]]></description>
  <guid>https://owenjonesuob.github.io/posts/2024-04-12-new-blog-who-dis/</guid>
  <pubDate>Fri, 12 Apr 2024 00:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2024-04-12-new-blog-who-dis/surprised_pikachu.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Multiple Names for Datasets in R Packages</title>
  <link>https://owenjonesuob.github.io/posts/2021-01-30-multiple-names-for-datasets-in-r-packages/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>“I am known by many names, but you may call me… Tim.” - <strong>Graham Chapman</strong></p>
</blockquote>
<hr>
<p>Last year<sup>1</sup> the <a href="https://github.com/MangoTheCat/mangoTraining">{mangoTraining}</a> package got a fair bit of much-needed TLC, and we discovered a problem which at first glance didn’t seem too tricky to solve, but which ended up leading down a very interesting rabbit hole.</p>
<p>The package is primarily a “data package”, i.e.&nbsp;a package which exists purely to provide datasets to users, and contains nearly 30 datasets of various sizes which are used in Mango’s training courses and referred to in books such as “R in 24 Hours”.</p>
<p>We tend to teach the latest best practices, so our training courses are updated on a regular basis.<sup>2</sup> Unfortunately once a physical book has been released into the wild, it’s not so easy to update it in the same way; so whenever we make changes to our material, we have to be careful not to break backwards compatibility!</p>
<p>This is how we stumbled upon the “multiple names for datasets in R packages” problem. Suppose we have a dataset in {mangoTraining} which was historically called <code>demoData</code>, but we now favour snake_case rather than lowerCamelCase in our recent material: how can we <em>also</em> use the name <code>demo_data</code> to refer to the dataset, so that we can use the new name in our new material without breaking compatibility with existing material?</p>
<p>And since we generally want to keep packages as small as possible<sup>3</sup>: can we do this without including multiple copies of the same dataset in the package?</p>
<p>This allows us to set out three requirements which cover what we’re trying to achieve:</p>
<ol type="1">
<li>The package must contain only a single copy of the full dataset</li>
<li>The dataset must be accessible using at least two different names</li>
<li>Each name must work correctly with <code>data()</code>, i.e.&nbsp;<code>data("x", package = "pkg")</code> must load an object called <code>x</code> into the session</li>
</ol>
<section id="adding-more-data-files" class="level2">
<h2 class="anchored" data-anchor-id="adding-more-data-files">Adding more data files</h2>
<p>I’m going to start by creating a new package, and then and immediately adding a dataset which I would like to include - which is incredibly simple these days, thanks to the marvellous <a href="https://github.com/r-lib/usethis">{usethis} package</a>!</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"> usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_tidy_package</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datapkg"</span>)</span>
<span id="cb1-2"> </span>
<span id="cb1-3"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... and then once the new session has opened:</span></span>
<span id="cb1-4"> diamonds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span>
<span id="cb1-5"> usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data</span>(diamonds)</span></code></pre></div>
<p>Following this, we can see that our dataset has been saved into the <code>data/</code> directory as a <code>.rda</code> file<sup>4</sup>, meaning our users can load this dataset into their session using <code>data("diamonds", package = "datapkg")</code>.</p>
<p>The name of the file has been created, quite sensibly, from the name of the R object we saved into it. Renaming the file isn’t a good idea, because the object it contains will still have the old name! For example, if we manually renamed <code>data/diamonds.rda</code> to <code>data/diamantes.rda</code> and rebuilt/reinstalled our package, then if we ran</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamantes"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datapkg"</span>)</span></code></pre></div>
<p>we <em>would</em> get our data loaded into our session; BUT it would still be in an object called <code>diamonds</code>! This is because <code>.rda</code> files store an entire R environment, possibly containing multiple objects: when we load that environment into our session, all the objects are just dumped into the session, exactly as they were when they were saved.<sup>5</sup></p>
<p>So if we want a different name for our dataset, we actually need to rename the object itself before saving it:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">diamantes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds</span>
<span id="cb3-2">usethis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">use_data</span>(diamantes)</span></code></pre></div>
<p>This is all useful context, but we haven’t actually satisfied our first requirement yet! Our users <em>can</em> now get either <code>diamonds</code> or <code>diamantes</code> from our package; but that’s because the package contains the same dataset twice, in two separate <code>.rda</code> files (<code>diamonds.rda</code> and <code>diamantes.rda</code>). What we would ideally like to do is to have multiple names pointing towards the same underlying dataset, so that we only have to have one copy of that dataset in our package but it can be called in multiple ways.</p>
</section>
<section id="multiple-names-for-functions" class="level2">
<h2 class="anchored" data-anchor-id="multiple-names-for-functions">Multiple names for functions</h2>
<p>It’s really easy to do something along those lines with functions, because we can store a function in a variable and then just reassign that variable to our heart’s content.<sup>6</sup></p>
<p>To prove the point:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>y</span>
<span id="cb4-2">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> f</span>
<span id="cb4-3">g</span></code></pre></div>
<pre class="rconsole"><code>function(x, y) x+y</code></pre>
<p>This can be really useful when you want to implement a piece of functionality in just one place, but then to allow the user to access the same functionality via more than one name. Here’s an example from {tibble}: the “type check” function for tibble objects is named <code>is_tibble()</code>, in line with tidyverse naming conventions; but the authors also provide an alias, <code>is.tibble()</code>, which matches base R naming conventions (<code>is.numeric()</code>, <code>is.data.frame()</code> etc) in anticipation of users trying that pattern first.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">is.tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deprecate_warn</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2.0.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is.tibble()"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_tibble()"</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_tibble</span>(x)</span>
<span id="cb6-5">}</span></code></pre></div>
<p>You can see this in the context of the source code <a href="https://github.com/tidyverse/tibble/blob/dd29fb76b6b0335a08658c14483fe3cbb81cf7d7/R/tibble.R#L196">here</a>. If a user calls <code>is.tibble()</code>, the responsibility is passed straight on to <code>is_tibble()</code> after a nudge towards the “preferred” tidyverse syntax.</p>
</section>
<section id="multiple-names-for-datasets" class="level2">
<h2 class="anchored" data-anchor-id="multiple-names-for-datasets">Multiple names for datasets?</h2>
<p>Let’s review again the key points we would like to achieve:</p>
<ol type="1">
<li>The package must contain only a single copy of the full dataset</li>
<li>The dataset must be accessible using at least two different names</li>
<li>Each name must work correctly with <code>data()</code>, i.e.&nbsp;<code>data("x", package = "pkg")</code> must load an object called <code>x</code> into the session</li>
</ol>
<p>That third point is quite important for the usability of the package. In fact, if we spend some time thinking about the third point here, we actually get a big push in the right direction!</p>
<p>From the Details section of the documentation for <code>data()</code>:</p>
<blockquote class="blockquote">
<p>Currently, four formats of data files are supported:</p>
<ol type="1">
<li><p>files ending ‘.R’ or ‘.r’ are <code>source()</code>d in, with the R working directory changed temporarily to the directory containing the respective file. (<code>data</code> ensures that the <strong>utils</strong> package is attached, in case it had been run <em>via</em> <code>utils::data.</code>)</p></li>
<li><p>files ending ‘.RData’ or ‘.rda’ are <code>load()</code>ed. …</p></li>
</ol>
</blockquote>
<p>We’re familiar with the second format, <code>.rda</code>, but maybe we didn’t know about the first! So it looks like we might be able to create a <code>.R</code> file which somehow loads the dataset which we have already saved elsewhere…</p>
<p>Let’s make a file called <code>data/diamantes.R</code>, which - as we’ve just learned! - will be run using <code>source()</code> if our user calls <code>data("diamantes", package = "datapkg")</code>.</p>
<p>Now all we have to do is figure out how to “copy” our <code>diamonds</code> dataset into an object called <code>diamantes</code>.</p>
<p>Let’s naively try a similar approach to the one we’ve seen used for functions. I’ll add the following line to <code>data/diamantes.R</code>:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">diamantes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds</span></code></pre></div>
<p>But attempting to build the package quickly results in a nasty error…</p>
<pre class="rconsole"><code>==&gt; Rcmd.exe INSTALL --no-multiarch --with-keep.source datapkg

* installing to library 'C:/.../R/win-library/4.0'
* installing *source* package 'datapkg' ...
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** byte-compile and prepare package for lazy loading
Error in eval(exprs[i], envir) : object 'diamonds' not found
Error: unable to load R code in package 'datapkg'
Execution halted
ERROR: lazy loading failed for package 'datapkg'
* removing 'C:/.../R/win-library/4.0/datapkg'
* restoring previous 'C:/.../R/win-library/4.0/datapkg'

Exited with status 1.</code></pre>
<p>Note the <code>object 'diamonds' not found</code>!</p>
<p>This is because datasets aren’t like other R objects: as <a href="https://r-pkgs.org/data.html#documenting-data">r-pkgs</a> puts it,</p>
<blockquote class="blockquote">
<p>Objects in data/ are always effectively exported (<strong>they use a slightly different mechanism than NAMESPACE but the details are not important</strong>).</p>
</blockquote>
<p>That “slightly different mechanism” is our problem - we can’t simply refer to datasets as internal objects within our package! So we’ll have to try a different approach…</p>
</section>
<section id="lets-read-that-again" class="level2">
<h2 class="anchored" data-anchor-id="lets-read-that-again">Let’s read that again</h2>
<p>Remember what the documentation for <code>data()</code> said? (We only looked at it a minute ago!)</p>
<p>We’ve started to take advantage of</p>
<blockquote class="blockquote">
<p>1. files ending ‘.R’ or ‘.r’ are <code>source()</code>d in, with the R working directory changed temporarily to the directory containing the respective file</p>
</blockquote>
<p>already - and now</p>
<blockquote class="blockquote">
<p>2. files ending ‘.RData’ or ‘.rda’ are <code>load()</code>ed</p>
</blockquote>
<p>is also going to be helpful, for getting hold of our already-saved data!</p>
<p>Let’s edit <code>data/diamantes.R</code> so that it contains just the following line:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds.rda"</span>)</span></code></pre></div>
<p>Note that we are using a relative path to <code>diamonds.rda</code> because, as informed by the docs, our working directory is now the directory where <code>data/diamantes.R</code> lives, i.e.&nbsp;<code>data/</code>!</p>
<p>Now our package <em>does</em> build and install, but we do get an ominous warning in the output…</p>
<pre class="rconsole"><code>[...]
** data
*** moving datasets to lazyload DB
Warning: object 'diamonds' is created by more than one data call
** byte-compile and prepare package for lazy loading
[...]</code></pre>
<p>… which makes sense. When we call <code>data("diamantes", package = "datapkg")</code>, we simply end up calling the same thing as <code>data("diamonds", package = "datapkg")</code>, so we end up with an object called <code>diamonds</code> in our session rather than <code>diamantes</code>. We’re closer, but we’re not there yet!</p>
<p>Maybe we can rearrange <code>data/diamantes.R</code> slightly to rename things for us…</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds.rda"</span>)</span>
<span id="cb11-2">diamantes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds</span></code></pre></div>
<p>This seems very close. We get the same warning about <code>diamonds</code> when we rebuild the package, but now when we call <code>data("diamantes", package = "datapkg")</code> we <em>do</em> get an object called <code>diamantes</code>… we just <em>also</em> get one called <code>diamonds</code>! This is because when we source <code>data/diamantes.R</code>, we end up with two objects in the environment at the end of the script (<code>diamonds</code> and <code>diamantes</code>), both of which are then pulled into our R session.</p>
<p>So we can add one more line to fix this problem:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds.rda"</span>)</span>
<span id="cb12-2">diamantes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(diamonds)</span></code></pre></div>
<p>And now we have achieved our goal! No more warning message when we build, and both <code>diamonds</code> and <code>diamantes</code> work in the way we wanted.</p>
</section>
<section id="now-do-it-in-one-line" class="level2">
<h2 class="anchored" data-anchor-id="now-do-it-in-one-line">Now do it in one line</h2>
<p>Three lines was too many for you?? Okay - we can replace the current contents of <code>data/diamantes.R</code> with:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">diamantes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">load</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds.rda"</span>)))</span></code></pre></div>
<p>Working from the inside out:</p>
<ul>
<li><code>load("diamonds.rda")</code> loads <code>diamonds</code> into our environment, and returns a vector of names of all loaded objects, i.e.&nbsp;<code>c("diamonds")</code></li>
<li><code>get()</code> retrieves the object with a name of <code>"diamonds"</code> from the <em>current</em> environment, since we didn’t provide a different environment via the <code>pos</code> argument - i.e.&nbsp;we now have the actual data frame which the <code>diamonds</code> variable name refers to</li>
<li><code>local()</code> means all of that happened in its own little throwaway environment - so we end up with the data frame object which was returned from <code>get()</code>, and everything else is just thrown away, including the <code>diamonds</code> object which had been created by <code>load()</code></li>
<li>And finally, we assign that data frame into an object called <code>diamantes</code>, which is the only object we created in our main environment and therefore the only object which will be created when we call <code>data("diamantes", package = "datapkg")</code></li>
</ul>
</section>
<section id="documentation" class="level2">
<h2 class="anchored" data-anchor-id="documentation">Documentation</h2>
<p>Of course, it’s important to document our datasets - again we can refer to the relevant chapter of the ever-so-useful <a href="https://r-pkgs.org/data.html">r-pkgs</a> for guidance! The documentation should live in <code>R/data.R</code>: we only have to write one set of documentation, and then we can use the <code>@rdname</code> Roxygen tag to include the other names!</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Prices of 50,000 round cut diamonds.</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' A dataset containing the prices and other attributes of almost 54,000</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' diamonds.</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @format A data frame with 53940 rows and 10 variables:</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' \describe{</span></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   \item{price}{price, in US dollars}</span></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   \item{carat}{weight of the diamond, in carats}</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'   ...</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' }</span></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @source \url{http://www.diamondse.info/}</span></span>
<span id="cb14-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamonds"</span></span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @rdname diamonds</span></span>
<span id="cb14-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diamantes"</span></span></code></pre></div>
</section>
<section id="epilogue" class="level2">
<h2 class="anchored" data-anchor-id="epilogue">Epilogue</h2>
<p>So far I’ve noticed <strong>two</strong> important things to bear in mind when using this approach:</p>
<ul>
<li>We don’t have to stop at two names - if we want to, we can keep making new <code>data/*.R</code> files which point back to the same <code>.rda</code> file! HOWEVER, we shouldn’t have two <em>files</em> with names which differ only in capitalisation, e.g.&nbsp;<code>diamantes.R</code> and <code>DiaMantes.R</code> - this is not possible on Windows, and not a great idea on other platforms! (In this particular case, we could have <code>diamantes.rda</code> with <code>diamonds.R</code> and <code>DiaMantes.R</code> instead)</li>
<li>If you build your package using the <code>--resave-data</code> flag, any <code>data/*.R</code> files will be sourced and resaved as <code>.rda</code> files as part of the build process, rendering all your hard work useless!<sup>7</sup></li>
</ul>
<p>I’d be keen to hear whether anyone else has success with this method too, or if there are better ways to achieve the same thing! We seemed to make it through the CRAN submission process for {mangoTraining} with no problems at all; but I’m curious as to how reproducible this is. In particular I would love to know whether the CRAN builds use <code>--resave-data</code> or not, and whether that would scupper this method for packages where resaving takes us over the package size limit!</p>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Yes, it’s taken me nearly a year to write up this post. Please forgive me, I’ve been very busy surviving.↩︎</p></li>
<li id="fn2"><p>Keeping content up to date can be quite a lot of work in itself! So in fact it was only quite recently that we committed 100% to following <a href="https://style.tidyverse.org/">the tidyverse style guide</a> wherever possible.↩︎</p></li>
<li id="fn3"><p>While keeping packages small is a good idea anyway (especially if you’re using version control!), an extra motivating factor here is the 5MB upload limit for CRAN packages as detailed on the <a href="https://cran.r-project.org/web/packages/policies.html">CRAN policies page</a>. You can imagine a situation where we want to use 2 different names for a 3MB dataset!↩︎</p></li>
<li id="fn4"><p>As we would expect from {usethis}, this completely aligns with the rules and conventions on saving datasets within R packages, set out in <a href="https://r-pkgs.org/data.html">r-pkgs</a> and elsewhere.↩︎</p></li>
<li id="fn5"><p>It took me a REALLY long time to get my head around this at first - has anyone else had an experience like trying to run <code>diamantes &lt;- data("diamonds")</code>, and then getting really frustrated when <code>diamantes</code> is not the data frame you were expecting? I found that so unintuitive. Actually nowadays when I need to save a single R object, I tend to use <code>.rds</code> rather than <code>.rda</code> for exactly that reason. However, <code>.rda</code> is the convention for R packages, so we’ll stick with it… grrrr…↩︎</p></li>
<li id="fn6"><p>This is because functions in R are “first-class objects”, i.e.&nbsp;you can give them a name, save them in variables, pass them into other functions as parameters… I took this for granted until recently, when I found out that you <em>can’t</em> do this so easily in many languages - for example, Java!↩︎</p></li>
<li id="fn7"><p>And possibly resulting in two identically-named files, if you had e.g.&nbsp;<code>hello.rda</code> and <code>HeLLO.R</code>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>package</category>
  <category>data</category>
  <guid>https://owenjonesuob.github.io/posts/2021-01-30-multiple-names-for-datasets-in-r-packages/</guid>
  <pubDate>Sat, 30 Jan 2021 15:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2021-01-30-multiple-names-for-datasets-in-r-packages/spiderman.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Debugging: Installing NVIDIA Drivers on Fedora</title>
  <link>https://owenjonesuob.github.io/posts/2019-06-13-nvidia-drivers-on-fedora/</link>
  <description><![CDATA[ 





<p><strong>TL;DR:</strong> I had mega issues with getting NVIDIA graphics to work on Fedora. This is a play-by-play of my debugging process, and ultimately the solution turned out to be rather simple.</p>
<hr>
<section id="context" class="level2">
<h2 class="anchored" data-anchor-id="context">Context</h2>
<p>Sometime last year my company decided to upgrade its IT assets, and consequently sold off a bunch of old laptops to interested employees.</p>
<p>I had been toying with the idea of getting a spare laptop anyway in order to play around with a Linux-based operating system, so this was the perfect opportunity. I managed to nab myself a chunky old Dell Latitude and, much to the frustration of my friend in IT who had spent the afternoon setting up a fresh Windows installation for me, asked him to borrow a USB stick and then immediately wiped the hard drive so that I could install Fedora.</p>
<p>Immediately, however, karma struck. I was attempting to use Fedora Media Writer to install the OS onto the laptop; but every time I successfully booted to the installation GUI, the laptop would freeze completely and I’d have to turn it off via the power button.</p>
<p>Eventually I succeeded by means of the installer’s “basic graphics mode”. However, after rebooting, it became clear that this had come with a catch: my screen was now stuck at a low resolution. Of course, I wanted to take advantage of all 1080 of my available p’s, so set about looking for the issue.</p>
<p>Bear in mind that this was more or less my first experience with a Linux OS. I knew how to do simple command line things, but I didn’t really know how Linux was set up, or how to change boot parameters, or what on earth a GRUB was, or any of those other fun low-level system things. So after a LOT of searching and reading, I eventually discovered the <code>/etc/default/grub</code> file and the <code>nomodeset</code> boot parameter. “Hah, problem solved!” I exclaimed, exterminating <code>nomodeset</code> from wherever it appeared. I rebooted the laptop: it froze immediately.</p>
<p>By this time I’d had enough for one day, so I shut the lid and forgot about it.</p>
<hr>
</section>
<section id="diagnosis-and-solution" class="level2">
<h2 class="anchored" data-anchor-id="diagnosis-and-solution">Diagnosis and solution</h2>
<p>Fast-forward an ENTIRE YEAR and finally, I had the time and inclination to take another look at the problem. For good measure, I decided to start with a fresh installation of the latest version the OS, Fedora 30.</p>
<p>Once again I had to run the installer in “basic graphics” mode, and so I was faced with lower-than-ideal screen resolution.</p>
<p>I started by upgrading the OS with a <code>sudo dnf update</code>, which took a while, as expected.</p>
<p>Then I spent several days trying ALL SORTS of fixes and tweaks and changes that I found on the internet. The laptop contains a NVIDIA graphics card, and apparently there are a <em>whooooole</em> load of issues with using Fedora and GNOME display manager (Fedora’s default graphical system) on NVIDIA hardware. I added repositories and installed drivers. I changed boot parameters. I modified configuration files. I added things to blacklists, and removed things from blacklists, and installed different display managers, and regenerated initramfs, and banged on the desk while laughing hysterically, and all sorts of other weird and wonderful things; but all to no avail.</p>
<p>On the plus side, I was learning a <em>lot</em> about Linux. I learned about virtual terminals when I accidentally disabled GDM and ended up with a bootscreen which perpetually flashed “Starting GNOME display manager”. I discovered the GRUB boot menu, and runlevels when I got fed up with trying to type my password letter by letter whenever the bootscreen flashed up for half a second at a time.</p>
<p>Eventually I ended up wiping and reinstalling the OS one more time, and then sat down with a cup of tea in front of a runlevel-3 command line, determined to get to the bottom of the issue once and for all, with logic and patience.</p>
<p>First things first: make sure the NVIDIA graphics are actually being used, right? So I checked the list of loaded modules for anything containing “nvidia”:</p>
<pre><code>lsmod | grep nvidia</code></pre>
<p>Oh. Nothing came back from that.</p>
<p>Ah yes, I thought. Duh. I’ll need to install the NVIDIA drivers.</p>
<p>There seem to be a couple of choices for where to get those drivers, but the repository which seemed to come up most often was RPM Fusion. So first we add the repo, then we install the driver according to the instructions on their website (https://rpmfusion.org/Howto/NVIDIA):</p>
<pre><code>sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

sudo dnf install xorg-x11-drv-nvidia akmod-nvidia</code></pre>
<p>Cool. Reboot and try again.</p>
<pre><code>lsmod | grep nvidia</code></pre>
<p>Nothing, nada, zilch. I double-checked that the NVIDIA driver had installed:</p>
<pre><code>modinfo nvidia</code></pre>
<p>That gave me a bunch of info, so the NVIDIA driver was definitely available… so if not NVIDIA, what <em>was</em> being used for graphics?</p>
<p>I remembered reading something about the fallback graphics system, which would be used if the desired system failed to load properly. Suspecting that this might be the case, I made sure:</p>
<pre><code>lsmod | grep nouveau</code></pre>
<p>This time I got several lines of output! So the problem wasn’t that the NVIDIA graphics module was misbehaving, but rather that it wasn’t loading at all.</p>
<p>This was progress! Cue a lot more playing around with boot parameters etc…</p>
<p>Eventually I realised that I could just force the system to load the NVIDIA module right there and then, using the <code>modprobe</code> command:</p>
<pre><code>modprobe nvidia
## modprobe: ERROR: could not insert 'nvidia': no such device</code></pre>
<p>Wait. No no no wait, what?! But <code>modinfo</code> said that oh you I just aaaaaaaaaaaaaaaaaaAAAAAAAAAAAAAAAAAAAA (┛✧Д✧)┛彡┻━┻</p>
<p>One quick cuppa later, gathered and composed, I tried again and asked for a little bit more information:</p>
<pre><code>modprobe nvidia -v</code></pre>
<p>I had also recently come across <code>dmesg</code> for displaying kernel messages, so thought I’d try that out too…</p>
<pre><code>dmesg | less</code></pre>
<p>Ah. Some wild NVIDIAs appeared pretty near the bottom of that output… let’s have a closer look…</p>
<pre><code>## NVRM: The NVIDIA NVS4200M GPU installed in this system is
## NVRM:  supported through the NVIDIA 390.xx Legacy drivers. Please
## NVRM:  visit http://www.nvidia.com/object/unix.html for more
## NVRM:  information.  The 430.14 NVIDIA driver will ignore
## NVRM:  this GPU.  Continuing probe...
## NVRM: No NVIDIA graphics adapter found!</code></pre>
<p>Oh oh oh oh oh oh oh oh oh oh oh oh oh OH.</p>
<p>So if I just…</p>
<pre><code>sudo dnf remove xorg-x11-drv-nvidia</code></pre>
<p>… and then…</p>
<pre><code>dnf list --repo rpmfusion-nonfree | grep nvidia | grep 390</code></pre>
<p>… and then…</p>
<pre><code>sudo dnf install xorg-x11-drv-nvidia-390xx</code></pre>
<p>One reboot later, and EVERYTHING WAS FINE. Everything. No freezing. No digging around in boot config files. And it’s been fine ever since. It’s like nothing ever happened.</p>
<hr>
</section>
<section id="review" class="level2">
<h2 class="anchored" data-anchor-id="review">Review</h2>
<p>Really this was all just rather frustrating at the time. I will freely admit that on more than one occasion during this saga I loudly exclaimed “I hate computers” to the little stuffed toy cat that sits on my desk. I say that quite often, as friends and colleagues will testify, and I stand by it. I really do hate them with a burning passion.</p>
<p>However, if there’s one thing I hate more than computers, it’s giving up on something once I’ve gotten my teeth into it. Even in the depths of despair, I could recognise that I was at least learning a lot of potentially useful information; and ultimately, that was enough to keep me going until I eventually hit that <code>dmesg</code> breakthrough.</p>
<p>I suppose it was a valuable experience, maybe, perhaps, in some ways. Maybe. Anyway, I figured it was worth writing about in case anyone is having similar issues, or in case anyone wanted to read a heartwarming story about courage in the face of adversity or something.</p>


</section>

 ]]></description>
  <category>linux</category>
  <category>fedora</category>
  <category>nvidia</category>
  <category>debugging</category>
  <guid>https://owenjonesuob.github.io/posts/2019-06-13-nvidia-drivers-on-fedora/</guid>
  <pubDate>Thu, 13 Jun 2019 11:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2019-06-13-nvidia-drivers-on-fedora/fedora_nvidia.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>AFK, back in 2 months</title>
  <link>https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/</link>
  <description><![CDATA[ 





<p>A year before I sat down here and started writing this sentence, I was about three months into a year-long work placement at <a href="https://mango-solutions.co.uk">Mango</a>. I loved what I was doing, I loved the people I was doing it with, and I was generally having a great time.</p>
<p>But at some point last spring, people started to ask me when I was leaving. I couldn’t tell whether it was because they knew that at some point I’d have to go back to university to complete my course, or because they’d had enough of me already and wanted me to go away. Either way, whenever I mentioned that I was thinking about taking advantage of what will probably be the last long summer holiday of my life, everyone told me the same thing: I’d be a fool not to.</p>
<p>Therefore after months of meticulous planning, early one mid-July morning myself and a friend - summoning as much 18th-century spirit as possible - set off to complete a Grand Tour of the continent.</p>
<p>Over the course of 55 days, we visited 22 countries, we covered over 6000 miles of European highway, and due to the fact that I was very busy being on holiday, I wrote precisely 0 lines of code.</p>
<p>So I’m not writing about some cool project I’ve done, or some amazing new tech I’ve been researching, or really anything at all to do with code or a computer. Sorry. I suppose this piece should really be called “some things I learned which definitely have completely nothing at all to do with my job”.</p>
<section id="some-things-i-learned-which-definitely-have-completely-nothing-at-all-to-do-with-my-job" class="level2">
<h2 class="anchored" data-anchor-id="some-things-i-learned-which-definitely-have-completely-nothing-at-all-to-do-with-my-job">Some things I learned which definitely have completely nothing at all to do with my job</h2>
<section id="head-for-high-ground" class="level3">
<h3 class="anchored" data-anchor-id="head-for-high-ground">1. Head for high ground</h3>
<p>This is probably what you learn on day one in Army Commander School.</p>
<p>You’re in charge. The furious battle is raging on all sides. Suddenly, you realise that you are in serious danger of being completely overwhelmed. This is a good time to employ a tactic commonly referred to as “running away”.</p>
<p>But if this is a battle you want (or need!) to win, it’s probably not a good idea to run away forever. Your opponent isn’t going to hang around for a while wondering where you’ve gone, and then just decide “actually, yeah, fair enough, we lost, never mind”.</p>
<p>Instead, you should run away to somewhere nearby, but as high up as possible. This gives you a chance to widen your view: you can see where you’ve been, where you want to go, what’s going on right now, and how those three things relate to each other. After assessing the situation from this elevated position, it is much easier to see what needs to be done and to refocus your efforts accordingly.</p>
<p>If you want to be a top-level Army Commander one day, you can learn more from this. On your next conquest (or, in my case, unfamiliar city) find that high ground and go on a quick reconnaissance mission as early as possible: identify your goals, think about the best way to get to them, and scan the horizon for any threats (or scary grey clouds) which might be on their way towards you.</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/high_ground.png" class="img-fluid"> <em>Once you have the high ground, it’s over</em></p>
</section>
<section id="record-what-youve-done" class="level3">
<h3 class="anchored" data-anchor-id="record-what-youve-done">2. Record what you’ve done</h3>
<p>On the whole, we humans are pretty smart. We’re good at figuring out how to do stuff, and once we’ve figured out what to do, we’re good at actually <em>doing</em> it.</p>
<p>Having said that, the same is true of other primates. And crows. And dolphins. And beavers. And so on, and so on.</p>
<p>The reason why we are <em>smarter</em> is that we have an awesome thing called “language”. Language lets us share our ideas and our experiences with other humans, so that they don’t have to come up with the same ideas or go through the same experiences in order to have the same knowledge.</p>
<p>Even better: at some point a few thousand years ago, someone figured out how to convert language into something physical. As a result, those of us who are alive right now have access to virtually all the knowledge developed by all of humankind since that point.</p>
<p>SO WHY YOU NO USE IT? Write down everything! Write down what you’ve done, and how you’ve done it, and <em>why</em> you’ve done it, and why you’ve done it like <em>that</em>, and everything that went wrong before you got it right, and everything you think it could lead to.</p>
<p>Do it for yourself, in anticipation of the moment when in six months’ time you realise you’ve forgotten where you were or who you were with or what the name of that street was.</p>
<p>Do it for other people, so that they don’t have to drive round eastern Prague four times trying to find the car park which was marked in the wrong place on the map.</p>
<p>Do it for the people who will stumble across your hastily scrawled notes years from now and, with a sudden flash of inspiration, will use them as the foundation to build myriad new and wonderful things.</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/log.png" class="img-fluid"> <em>My memory is terrible, but I wrote down all the embarrassing stories so that they’ll never be forgotten</em></p>
</section>
<section id="respect-experience" class="level3">
<h3 class="anchored" data-anchor-id="respect-experience">3. Respect experience</h3>
<p>Asking questions is a really really good thing to do. It’s one of the best ways to learn about things and you should never be afraid to ask about something you don’t understand.</p>
<p>However, it’s important to remember one thing: “always ask” is not the same as “always ask right now”.</p>
<p>If someone with more experience than you tells you to do something, and if you know that there is almost certainly a good reason, then even if you don’t know what that reason is… you should probably do the thing.</p>
<p>Wait until the pressure has eased a bit before demanding an explanation. You <em>should</em> still ask for one, but perhaps when everyone’s a little bit less stressed.</p>
</section>
<section id="call-a-spade-a-spade" class="level3">
<h3 class="anchored" data-anchor-id="call-a-spade-a-spade">4. Call a spade a spade</h3>
<p>Names can be controversial.</p>
<p>Pavement or sidewalk? Biscuit or cookie? Dinner or tea or supper? Bun or bap or roll? GIF or GIF?</p>
<p>But there are some names that virtually everyone agrees on. In particular, this tends to happen if it is <em>important</em> that everyone agrees on the name.</p>
<p>For example, “police” is an important concept: it represents protection, order, assistance, and a bunch of other useful words. Pretty much all European languages have almost exactly the same spelling and pronunciation for “police” as English does.</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/police.png" class="img-fluid"> <em>How to say “police” in the 18 different European languages which we came across during our trip</em></p>
<p>This means that if you speak any one of these languages, you can travel to any place where they speak any one of the others; and even if you’re in an unfamiliar environment where your understanding is limited, you aren’t completely on your own. If you need help, you can yell “POLICE!”, and someone in a uniform will probably come running.</p>
<p>Unless you’re in Hungary, because Hungarian is very strange.</p>
<p>… actually, someone will come running even in Hungary, because virtually everyone speaks English as a second language. They have to, because very few people choose to learn Hungarian as a second language - it’s only really spoken in Hungary, and as previously mentioned, it really is <em>very</em> strange. Nevertheless, it is the first language of around 13 million people, so there’s a reasonable chance that at some point you’ll need to find a friendly Hungarian to do some translation for you.</p>
<p>I suppose there are two points to take from this little section. Firstly, if you call things by more or less the same name as everyone else does, then this will usually help to improve shared understanding and will aid communication. Secondly, people who can speak multiple languages - and especially less widely-spoken languages - are super super valuable!</p>
</section>
<section id="call-a-spade-a-spade-but-that-doesnt-mean-you-should-assumedemand-that-everyone-else-is-going-to-call-every-single-item-in-their-toolshed-by-exactly-the-same-names-as-you-call-all-the-things-which-you-have-in-your-toolshed" class="level3">
<h3 class="anchored" data-anchor-id="call-a-spade-a-spade-but-that-doesnt-mean-you-should-assumedemand-that-everyone-else-is-going-to-call-every-single-item-in-their-toolshed-by-exactly-the-same-names-as-you-call-all-the-things-which-you-have-in-your-toolshed">5. Call a spade a spade, but that doesn’t mean you should assume/demand that everyone else is going to call every single item in their toolshed by exactly the same names as you call all the things which you have in YOUR toolshed</h3>
<p>Just to add an important caveat to the previous section: sure, it’s helpful if someone speaks the same language as you, and even more exciting if you realise they speak it with the same accent. But once you’ve traded your initial stories, that gets boring quite quickly.</p>
<p>Plus, you’re definitely going to struggle to make new friends if you go around loudly insisting that everyone speaks to you in your language, and getting angry or patronising people if they get something “wrong”. Socialise, compromise, learn.</p>
</section>
<section id="new-is-often-exciting-but-exciting-doesnt-have-to-be-new" class="level3">
<h3 class="anchored" data-anchor-id="new-is-often-exciting-but-exciting-doesnt-have-to-be-new">6. New is often exciting, but exciting doesn’t have to be new</h3>
<p>Humans have been around for a while now, which means we’ve already gone to most places. If you want to go somewhere no-one else has been before then your options are already fairly limited. If you add the complication of getting there in the first place, and the fairly high probability that you won’t find anything particularly interesting there anyway, then it begins to look like a bit of a daunting prospect.</p>
<p>However.</p>
<p>You don’t have to go somewhere no-one else has been before. You can go to the same places and do the same things that someone else has already done, and as long as you’re enjoying yourself, it really doesn’t matter that someone has been there and done it before. There’s always a slightly different route to the next place, or a slightly different angle to view something from, or something to take inspiration from when you’re planning your next adventure.</p>
<p>Maybe one day in the future, you’ll decide that you want a bigger challenge. Then you can dust off your old maps and start thinking about making that expedition out into the middle of nowhere. But there are plenty of other wonderful places to go and things to do first - and honestly, some of those places really are well worth a visit.</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/mermaid.png" class="img-fluid"> <em>If you see an awesome thing that someone else has already done, don’t be afraid to recreate it yourself (or to take photos of your friend recreating it)</em></p>
</section>
<section id="get-out-there-and-do-stuff" class="level3">
<h3 class="anchored" data-anchor-id="get-out-there-and-do-stuff">7. Get out there and do stuff</h3>
<p>There is so much out there.</p>
<p>No really, there is SO MUCH out there.</p>
<p>Go to places. Meet people. Talk to those people, then find more people. Read stuff, write stuff, look at things, show your friends, share opinions, debate stuff, be creative, demand feedback, ask questions, learn things, challenge yourself, pass on your passion, and while you’re busy doing all that never let anyone take away the thing that makes you <em>you</em>.</p>
<p>Go right now and carry on being awesome.</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/thumbs_up.png" class="img-fluid"></p>


</section>
</section>

 ]]></description>
  <category>data science</category>
  <guid>https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/</guid>
  <pubDate>Sat, 29 Sep 2018 18:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2018-09-29-afk-back-in-2-months/feet.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Using RStudio on a Google Cloud Dataproc cluster</title>
  <link>https://owenjonesuob.github.io/posts/2018-05-16-rstudio-on-google-cloud-dataproc/</link>
  <description><![CDATA[ 





<p>A few months ago, I was working on a really cool project with Google.</p>
<p>Without going into too much detail, we were extracting structured information from unstructured text and image data, and then using that new structured information to build a recommender system and some other fun ML stuff.</p>
<p>Anyway, a fairly major aspect of this project was the availability of <a href="https://cloud.google.com">Google Cloud Platform</a> resources. Given that I was expecting to do a lot of heavy image processing, I thought it would be useful to get a Dataproc cluster set up for a bit of extra <em>oomph</em>.</p>
<p>Dataproc uses Spark to manage the underlying cluster, and by default the cluster machines are set up with Python (and PySpark). However, I had already done a bunch of work in R on my own computer, and I was hoping to get going quickly on the cloud cluster without having to translate everything into Python first. Therefore I resolutely decided to get RStudio and sparklyr up and running on my shiny new Dataproc cluster.</p>
<p>Unfortunately… it seemed like nobody had actually done this before!</p>
<p>After a lot of digging, bodging and cussing, I did eventually succeed - and before I was able to feel too bad about spending so long on it (longer than it would have taken to rewrite my work in Python!), our colleague at Google said something along the lines of:</p>
<blockquote class="blockquote">
<p>“Hey, this is pretty cool. Do you think we could write this up properly?”</p>
</blockquote>
<p>Sure, why not! I put together some brief comments and dodgy screenshots; shortly afterwards the project finished, and I promptly forgot any of this had ever happened.</p>
<p>Then a couple of days ago I received an email. The wonderful people at Google have worked their magic and turned my just-functional setup process into a full Cloud Solutions writeup! I am indebted to them for doing so, and you can read it here:</p>
<blockquote class="blockquote">
<p><a href="https://cloud.google.com/solutions/running-rstudio-server-on-a-cloud-dataproc-cluster">Running Rstudio Server on a Cloud Dataproc Cluster</a></p>
</blockquote>



 ]]></description>
  <category>r</category>
  <category>rstudio</category>
  <category>cluster</category>
  <category>google</category>
  <category>cloud</category>
  <category>dataproc</category>
  <category>sparklyr</category>
  <guid>https://owenjonesuob.github.io/posts/2018-05-16-rstudio-on-google-cloud-dataproc/</guid>
  <pubDate>Wed, 16 May 2018 12:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2018-05-16-rstudio-on-google-cloud-dataproc/dataproc.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Love Machine: Automating the romantic songwriting process</title>
  <link>https://owenjonesuob.github.io/posts/2018-02-14-love-machine/</link>
  <description><![CDATA[ 





<p><strong>Note:</strong> I originally wrote this post for the Mango Solutions blog, and they have kindly allowed me to repost it here alongside the rest of my work. You can find the original post <a href="https://www.mango-solutions.com/blog/love-machine-automating-the-romantic-songwriting-process">here</a>!</p>
<hr>
<blockquote class="blockquote">
<p><em>Songwriting is a very mysterious process. It feels like creating something from nothing. It’s something I don’t feel like I really control.</em></p>
<p><em><strong>– Tracy Chapman</strong></em></p>
</blockquote>
<hr>
<p>It is February. The shortest, coldest, wettest, miserablest month of the British year.</p>
<p>Only two things happen in Britain during February. For a single evening, the people refrain from dipping all their food in batter and deep-frying it, and instead save some time by pouring the batter straight into a frying pan and eating it by itself; and for an entire day, the exchange of modest indications of affection between consenting adults is permitted, although the government advises against significant deviation from the actions specified in the state-issued Approved Romantic Gestures Handbook.</p>
<p>In Section 8.4 (Guidelines for Pre-Marital Communication) the following suggestion is made:</p>
<blockquote class="blockquote">
<p><em>“Written expressions of emotion should be avoided where possible. Should it become absolutely necessary to express emotion in a written format, it should be limited to a ‘popular’ form of romantic lyricism. Examples of such ‘popular’ forms include ‘love poem’ and ‘love song’.</em></p>
</blockquote>
<p>Thankfully, for those who have not achieved at least a master’s degree in a related field, writing a poem or song is a virtually impossible task. And following the sustained and highly successful effort to persuade the British youth that a career in the arts is a fast-track to unemployment, the number of applications to study non-STEM subjects at British universities has been falling consistently since the turn of the decade. This ensures that only the very best and most talented songwriters, producing the most creatively ingenuous work, are able to achieve widespread recognition, and therefore the British public are only exposed to high-quality creative influences.</p>
<p>But to us scientists, the lack of method is disturbing. This “creativity” must have a rational explanation. There must be some pattern.</p>
<p>This is unquestionably a problem which can be solved by machine learning, so let’s take the most obvious approach we can: we’ll train a recurrent neural network to generate song lyrics character by character.</p>
<hr>
<blockquote class="blockquote">
<p><em>You write down a paragraph or two describing several different subjects creating a kind of story ingredients-list, I suppose, and then cut the sentences into four or five-word sections; mix ’em up and reconnect them. You can get some pretty interesting idea combinations like this. You can use them as is or, if you have a craven need to not lose control, bounce off these ideas and write whole new sections.</em></p>
<p><em><strong>– David Bowie</strong></em></p>
</blockquote>
<hr>
<p>To build our neural network I’m going to be using the Keras machine learning interface (which we’re very excited about here at Mango right now - keep an eye out for workshops in the near future!). I’ve largely followed the steps in <a href="https://keras.rstudio.com/articles/examples/lstm_text_generation.html">this example</a> from the Keras for R website, and I’m going to stick to a high-level description of what’s going on, but if you’re the sort of person who would rather dive head-first into the code, don’t feel like you have to hang around here - go ahead and have a play! And if you want to read more about RNNs, <a href="http://karpathy.github.io/2015/05/21/rnn-effectiveness/">this excellent post</a> by Andrej Kaparthy is at least as entertaining and significantly more informative than the one you’re currently reading.</p>
<p>We start by scraping as many love song lyrics as possible from the web - these will form our training material. Here’s the sort of thing we’re talking about:</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-02-14-love-machine/lyr0.png" class="img-fluid"></p>
<p>Well… that’s how they look to us. Actually, after a bit of preprocessing, the computer sees something more like this:</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-02-14-love-machine/lyr1.png" class="img-fluid"></p>
<p>All line breaks are represented by the pair of characters “\n”, and so all the lyrics from all the songs are squashed down into one big long string.</p>
<p>Then we use this string to train the network. We show the network a section of the string, and tell it what comes next.</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-02-14-love-machine/lyr2.png" class="img-fluid"></p>
<p>So the network gradually learns which characters tend to follow a given fixed-length “sentence”. The more of these what-comes-next examples it sees, the better it gets at correctly guessing what should follow any sentence we feed in.</p>
<p>At this point, our network is like a loyal student of a great artist, dutifully copying every brushstroke in minuscule detail and receiving a slap on the wrist and a barked correction every time it slips up. Via this process it appears to have done two things.</p>
<p>Firstly, it seems to have developed an understanding of the “rules” of writing a song. These rules are complex and multi-levelled; the network first had to learn the rules of English spelling and grammar, before it could start to make decisions about when to move to a new line or which rhyming pattern to use.</p>
<p>(Of course, it hasn’t actually “developed an understanding” of these rules. It has no idea what a “word” is, or a “new line”. It just knows that every few characters it should guess <code>" "</code>, and then sometimes it should put in a <code>"\"</code>, and whenever it puts in a <code>"\"</code> then it’s got to follow that up with a <code>"n"</code> and then immediately a capital letter. Easy peasy.)</p>
<p>Secondly, and in exactly the same way, the network will have picked up some of the style of the work it is copying. If we were training it on the songs one specific artist, it would have learned to imitate the style of that particular artist - but we’ve gone one better than that and trained it on all the love songs we could find. So effectively, it’s learned how <em>everyone else</em> writes love songs.</p>
<p>But no-one gets famous by writing songs which have already been written. What we need now is some creativity, some passion, a little bit of <em>je ne sais quoi</em>.</p>
<p>Let’s stop telling our network what comes next. Let’s give it the freedom to write whatever it likes.</p>
<hr>
<blockquote class="blockquote">
<p><em>I don’t think you can ever do your best. Doing your best is a process of trying to do your best.</em></p>
<p><em><strong>– Townes van Zandt</strong></em></p>
</blockquote>
<hr>
<p>It’s interesting to look at the songwriting attempts of the network in the very early stages of training. At first, it is guessing more or less at random what character should come next, so we end up with semi-structured gobbledegook:</p>
<pre><code>fameliawmalYaws. Boflyi, methabeethirts yt
play3mppioty2=ytrnfuunuiYs blllstis
Byyovcecrowth andtpazo's youltpuduc,s Ijd"a]bemob8b&gt;fiume,;Co
Bliovlkfrenuyione (ju'te,'ve ru t Kis
go arLUUs,k'CaufkfR )s'xCvectdvoldes

4So
Avanrvous Ist'dyMe Dolriri</code></pre>
<p>But notice that even in that example, which was taken from a very early training stage, the network has already nailed the “\n” newline combo and has even started to pick up on other consistent structural patterns like closing a “(” with a “)”. Actually, the jumbled nonsense becomes coherent English (or English-esque) ramblings quite quickly.</p>
<p>There is one interesting parameter to adjust when we ask the model to produce some output: the “diversity” parameter, which determines how adventurous the network should be in its choice of character. The higher we set this parameter, the more the network will favour slightly-less-probable characters over the most obvious choice at each point.</p>
<p>If we set the diversity parameter too low, we often degenerate into uncontrolled bursts of la-ing:</p>
<pre><code>la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la
la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la
la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la
(... lots more "la"s)</code></pre>
<p>But set it too high and the network decides dictionary English is too limiting.</p>
<pre><code>Oh, this younan every, drock on
Scridh's tty'
Is go only ealled
You could have like the one don'm I dope
Love me
And woment while you all that
Was it statiinc. I living you must?
We dirls anythor</code></pre>
<p>It’s difficult to find the write balance between syllabic repetition and progressive vocabulary, and there’s a surprisingly fine line between the two - this will probably prove to be a fruitful area for further academic research.</p>
<p>I think that identifying the optimal diversity parameter is probably the key to good songwriting.</p>
<hr>
<blockquote class="blockquote">
<p><em>Songwriting is like editing. You write down all this stuff - all this bad, stupid stuff - and then you have to get rid of everything except the very best.</em></p>
<p><em><strong>– Juliana Hatfield</strong></em></p>
</blockquote>
<hr>
<p>Here are some particularly “beautiful” passages taken from the great amount of (largely poor) material the model produced. I haven’t done any editing other than to isolate a few consecutive lines at a time and in the last few examples, to start the network off with certain sentences. Wishing you a Happy Valentine’s Day!</p>
<hr>
<pre class="rconsole"><code>
I want to do the trute
I want to do and I don't want it to love you
I want to work around
And the world we can stay the sun
And the sky is a wind a time
I won't never need a love


And I Mister the sunshine that I was to be with you
I need you
I want to wanna learn a river
And I want you to stand in the sun
I need you and I want you and I can stay away


I wonder the stars the stars the smile
And I wonder the ones of my life
I was the litter more
And I was the sun
She too moment we can tell my life
I can't be when I wanted to leave it all
I wonder the light and the stars the sun
And I can still let me love me
I can still let me love me
I want to fall a lover your love
I want to fall in love
I want to see your eyes


I must find a believer to say
But where ain't all about you
I must have to make to meet to leare
I must have to think of you
I would never knows, don't make to love you
That she cry
And I could always find your sunchin' starter
What's enough the hold my way you can stall
A darly love my heart I don't know
And I must have to mean to me
I'm so time now
</code></pre>
<hr>
<pre class="rconsole"><code>
I know your eyes in the morning sun
I feel the name of love
Love is a picked the sun
All my life I can make me wanna be with you
I just give up in your head
And I can stay that you want a life
I've stay the more than I do


How long will I love you
As long as there is that songs
All the things that you want to find you
I could say me true
I want to fall in love with you
I want my life
And you're so sweet
When I see you wanted to that for you
I can see you and thing, baby
I wanna be alone


Oh yeah I tell you somethin'
I think you'll understand
When I say that somethin'
I thought the dartion hyand
I want me way to hear
All the things what you do


Wise men say
Only fools rush in
But I can hear your love
And I don't wanna be alone


If I should stay
I would only be in your head
I wanna know that I hope I see the sun
I want a best there for me too
I just see that I can have beautiful
So hold me to you
</code></pre>



 ]]></description>
  <category>neural network</category>
  <category>r</category>
  <category>keras</category>
  <category>valentines</category>
  <guid>https://owenjonesuob.github.io/posts/2018-02-14-love-machine/</guid>
  <pubDate>Wed, 14 Feb 2018 12:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2018-02-14-love-machine/microphone.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Scale up your interest: key steps for getting into data science</title>
  <link>https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/</link>
  <description><![CDATA[ 





<p><strong>Note:</strong> I originally wrote this post for the Mango Solutions blog, and they have kindly allowed me to repost it here alongside the rest of my work. You can find the original post <a href="https://www.mango-solutions.com/blog/scale-up-your-interest-key-steps-for-getting-into-data-science">here</a>!</p>
<hr>
<section id="prelude" class="level3">
<h3 class="anchored" data-anchor-id="prelude">Prelude</h3>
<p>Maybe you’re looking for a change of scene. Maybe you’re looking for your first job. Maybe you’re stuck in conversation with a relative who you haven’t spoken to since last Christmas and who has astonishingly strong opinions on whether cells ought to be merged or not in Excel spreadsheets.</p>
<p>The fact of the matter is that you have just encountered the term “data science” for the first time, and it sounds like it might be interesting but you don’t have a clue what it is. Something to do with computers? Should you bring a lab coat, or a VR headset? Or both? What is a data and how does one science it?</p>
<p>Fear not. I am here to offer subjective, questionable and most importantly <em>FREE</em> advice from the perspective of someone who was in that very position not such a long time ago. Read on at your peril.</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/start.png" class="img-fluid"></p>
</section>
<section id="i.-adagio-hear-about-data-science" class="level3">
<h3 class="anchored" data-anchor-id="i.-adagio-hear-about-data-science">I. <em>Adagio</em>: Hear about data science</h3>
<p>This is the hard bit. It’s surprisingly difficult to stumble upon data science unless someone tells you about it.</p>
<p>But the good news is that you’re reading this, so you’ve already done it. Possibly a while ago, or possibly just now; either way, put a big tick next to Step 1. Congratulations!</p>
<p>(By the way, you’ll remember the person who told you about data science. When you grow in confidence yourself, be someone else’s “person who told me about data science”. It’s a great thing to share. But all in good time…)</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/adagio.png" class="img-fluid"></p>
</section>
<section id="ii.-andante-find-out-more" class="level3">
<h3 class="anchored" data-anchor-id="ii.-andante-find-out-more">II. <em>Andante</em>: Find out more</h3>
<p>But what actually <em>is</em> data science?</p>
<p>To be honest, it’s a fairly loosely-defined term. There are plenty of articles out there that try to give an overview, but most descend into extended discussions about the <a href="https://www.google.co.uk/search?num=20&amp;q=data+science+unicorns">existence of unicorns</a> or resort to arranging countless combinations of potentially relevant acronyms in <a href="https://www.kdnuggets.com/2016/10/battle-data-science-venn-diagrams.html">hideous indecipherable Venn diagrams</a>.</p>
<p>You’re much better off finding examples of people “doing” data science. Find some blogs (<a href="http://varianceexplained.org/">here</a> <a href="http://www.sumsar.net/">are</a> <a href="http://blog.otoro.net/">a</a> <a href="https://medium.com/@kierisi">few</a> <a href="https://juliasilge.com/blog/">awesome</a> <a href="https://hilarymason.com/blog/">ones</a> <a href="http://www.randalolson.com/blog/">to</a> <a href="http://blog.kaggle.com/">get</a> <a href="https://www.mango-solutions.com/blog/">you</a> <a href="https://github.com/rushter/data-science-blogs">started</a>) and read about what people are up to in the real world.</p>
<p>Don’t be afraid to narrow down and focus on a specific topic that interests you - there’s so much variety out there that you’re bound to find something that inspires you to keep reading and learning. But equally, explore as many new areas as you can, because the more context you can get about the sector the better your understanding will be and you’ll start to see how different subjects and different roles relate to each other.</p>
<p>Believe it or not, one of the best tools for keeping up to date with the latest developments in the field is <a href="https://twitter.com/">Twitter</a>. If you follow all your blog-writing heroes, not only will you be informed whenever they publish a new article but you’ll also get an <a href="https://twitter.com/SwindleApe/status/938025492103524352">invaluable glimpse</a> into their <a href="https://speakerdeck.com/jennybc/workflow-you-should-have-one?slide=5">day-to-day jobs</a> and <a href="https://twitter.com/kierisi/status/940265482162143234">working habits</a>, as well as all the cool industry-related stuff they share. Even if you never tweet anything yourself you’ll be exposed to much more than you’d be able to find on your own. If you want to get involved there’s no need to be original - you could just use it to share content you’ve found interesting yourself.</p>
<p>If you’re super keen, you might even want to get yourself some data science books tackling a particular topic. Keep an eye out for free online/ebook versions too!</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/andante.png" class="img-fluid"></p>
</section>
<section id="iii.-allegretto-get-hands-on" class="level3">
<h3 class="anchored" data-anchor-id="iii.-allegretto-get-hands-on">III. <em>Allegretto</em>: Get hands-on</h3>
<p>Observing is great, but it will only get you so far.</p>
<p>Imagine that you’ve just heard about an amazing new thing called “piano”. It sounds great. No, it sounds INCREDIBLE. It’s the sort of thing you really want to be good at.</p>
<p>So you get online and read more about it. Descriptions, analyses, painstaking breakdowns of manual anatomy and contrapuntal textures. You watch videos of people playing pianos, talking about pianos, <a href="https://youtu.be/F92FQdnLlSc?t=35s">setting pianos on fire and hurling them across dark fields</a>. You download reams of free sheet music and maybe even buy a book of pieces you really want to learn.</p>
<p>But at some point… you need to play a piano.</p>
<p>The good news is that with data science, you don’t need to buy a piano, or find somewhere to keep it, or worry about bothering your family/friends/neighbours/pets with your late-night composing sessions.</p>
<p>Online interactive coding tutorials are a great place to start if you want to learn a new programming language. Sites like <a href="https://noamross.github.io/datacamp-sexual-assault/">DataCamp</a> and <a href="https://www.codecademy.com/">Codecademy</a> offer a number of free courses to get yourself started with data science languages like R and Python. If you are feeling brave enough, take the plunge and run things on your own machine! (I’d strongly recommend using R with <a href="https://www.rstudio.com/products/rstudio/">RStudio</a> and using <a href="https://www.anaconda.com/what-is-anaconda/">Anaconda</a> for Python.) Language-specific “native-format” resources such as <a href="">SWIRL</a> for R or <a href="https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks">this set of Jupyter notebooks</a> for Python are a great way to learn more advanced skills. Take advantage of the exercises in any books you have - don’t just skip them all!</p>
<p>Data science is more than just coding though - it’s all about taking a problem, understanding it, solving it and then communicating those ideas to other people. So Part 1 of my Number One Two-Part Top Tip for you today is:</p>
<blockquote class="blockquote">
<p>1. Pick a project and write about it</p>
</blockquote>
<p>How does one “pick a project”? Well, find something that interests you. For me it was neural networks (and later, car parks…) but it could be literally anything, so long as you’re going to be able to find some data to work with. Maybe have a look at some of the <a href="https://www.kaggle.com/competitions">competitions hosted on Kaggle</a> or see if there’s <a href="https://www.bathhacked.org/">a group in your area which publishes open data</a>.</p>
<p>Then once you’ve picked something, go for it! Try out that cool package you saw someone else using. Figure out <em>why</em> there are so many missing values in that dataset. Take risks, explore, try new things and push yourself out of your comfort zone. And don’t be afraid to take inspiration from something that someone else has already done: regardless of whether you follow the same process or reach the same outcome, your take on it is going to be different to theirs.</p>
<p>By <em>writing</em> about that project - which is often easier than deciding on one in the first place - you’re developing your skills as a communicator by presenting your work in a coherent manner, rather than as a patchwork of dodgy scripts interspersed with the occasional hasty comment. And even if you don’t want to make your writing public, you’ll be amazed how often you go back and read something you wrote before because it’s come up again in something else you’re working on and you’ve forgotten how to do it.</p>
<p>I’d really encourage you to get your work out there though. Which brings us smoothly to…</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/allegretto.png" class="img-fluid"></p>
</section>
<section id="iv.-allegro-maestoso-get-yourself-out-there" class="level3">
<h3 class="anchored" data-anchor-id="iv.-allegro-maestoso-get-yourself-out-there">IV. <em>Allegro maestoso</em>: Get yourself out there</h3>
<p>If you never play the piano for anyone else, no-one’s ever going to find out how good you are! So Part 2 of my Number One Two-Part Top Tip is:</p>
<blockquote class="blockquote">
<p>2. Start a blog</p>
</blockquote>
<p>It’s pretty easy to get going with <a href="https://wordpress.com/">Wordpress</a> or similar, and it takes your writing to the next level because now you’re writing for an audience. It may not be a very big audience, but if someone, somewhere finds your writing interesting or useful then surely it’s worth it. And if you know you’re potentially writing for someone other than yourself then you <em>need</em> to explain everything properly, which means you need to <em>understand</em> everything properly. I often learn more when I’m writing up a project than when I’m playing around with the code in the first place.</p>
<p>Also, a blog is a <em>really</em> good thing to have on your CV and to talk about at interviews, because it gives you some physical (well, virtual) evidence which you can point at as you say “look at this thing wot I’ve done”.</p>
<p>(Don’t actually say those exact words. Remember that you’re a Good Communicator.)</p>
<p>If you’re feeling brave you can even put that Twitter account to good use and start shouting about all the amazing things you’re doing. You’ll build up a loyal following amazingly quickly. Yes, half of them will probably be bots, but half of them will be real people who enjoy reading your work and who can give you valuable feedback.</p>
<p>Speaking of real people…</p>
<blockquote class="blockquote">
<p>3. Get involved in the community</p>
</blockquote>
<p>Yes, that was indeed Part 3 of my Number One Two-Part Top Tip, but it’s so important that it needs to be in there.</p>
<p>The online data science community is one of the best out there. The R community in particular is super friendly and supportive (check out forums like <a href="https://community.rstudio.com/">RStudio Community</a>, community groups like <a href="https://medium.com/@kierisi/r4ds-the-next-iteration-d51e0a1b0b82">R4DS</a>, and the <a href="https://twitter.com/hashtag/rstats?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Ehashtag">#rstats</a> tag on Twitter). Get involved in conversations, learn from people already working in the sector, share your own knowledge and <em>make friends</em>.</p>
<p>Want to go one better than online?</p>
<p>Get a <a href="https://www.meetup.com/">Meetup</a> account, sign up to some local groups and go out to some events. It might be difficult to force yourself to go for the first time, but pluck up the courage and do it. Believe me when I say there’s no substitute for meeting up and chatting to people. Many good friends are people I met for the first time at meetups. And of course, it’s the perfect opportunity to network - I met 5 or 6 of my current colleagues through <a href="https://www.meetup.com/Bath-Machine-Learning-Meetup/">BathML</a> before I even knew about Mango!</p>
<p>(If you’re in or near Bristol or London, <a href="https://www.meetup.com/Bristol-Data-Scientists/">Bristol Data Scientists</a> and <a href="https://www.meetup.com/LondonR/">LondonR</a> are both hosted by Mango and new members are always welcome!)</p>
<p><img src="https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/allegro.png" class="img-fluid"></p>
</section>
<section id="postlude" class="level3">
<h3 class="anchored" data-anchor-id="postlude">Postlude</h3>
<p>Of course, everything I’ve just said is coming from my point of view and is entirely based on my own experiences.</p>
<p>For example, I’ve talked about coding quite a lot because I personally code quite a lot; and I code quite a lot because I enjoy it. That might not be the case for you. That’s fine. In fact it’s more than “fine”; the huge diversity in people’s backgrounds and interests is what makes data science such a fantastic field to be working in right now.</p>
<p>Maybe you’re interested in data visualisation. Maybe you’re into webscraping. Or stats. Or <a href="https://en.wikipedia.org/wiki/Financial_technology">fintech</a>, or <a href="https://en.wikipedia.org/wiki/Natural_language_processing">NLP</a>, or <a href="https://en.wikipedia.org/wiki/Artificial_intelligence">AI</a>, or <a href="https://en.wikipedia.org/wiki/Business_intelligence">BI</a>, or <a href="https://en.wikipedia.org/wiki/Continuous_integration">CI</a>. Maybe <em>you</em> are the relative at Christmas dinner who won’t stop banging on about why you should NEVER, under ANY circumstances, merge cells in an Excel spreadsheet (UNLESS it is PURELY for purposes of presentation).</p>
<p>Oh, why not:</p>
<blockquote class="blockquote">
<p>4. Find the parts of data science that you enjoy and arrange them so that they work for you.</p>
</blockquote>
<p><img src="https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/final.png" class="img-fluid"></p>


</section>

 ]]></description>
  <category>data science</category>
  <category>r</category>
  <category>python</category>
  <category>intro</category>
  <category>piano</category>
  <guid>https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/</guid>
  <pubDate>Thu, 04 Jan 2018 12:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2018-01-04-scale-up-your-interest/sheet_music.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>H2O.ai: Going for a paddle</title>
  <link>https://owenjonesuob.github.io/posts/2017-08-23-h2o-ai-going-for-a-paddle/</link>
  <description><![CDATA[ 





<p>
</p><p><strong>Note:</strong> I originally wrote this post for the Mango Solutions blog, and they have kindly allowed me to repost it here alongside the rest of my work! You can find the original post <a href="https://www.mango-solutions.com/blog/h2o-ai-going-for-a-paddle">here</a>.</p>
<hr>
<section id="a-quick-disclaimer" class="level2">
<h2 class="anchored" data-anchor-id="a-quick-disclaimer">
A quick disclaimer
</h2>
<p>
This post isn’t called <em>H2O.ai: Going for the 100m freestyle world record</em>. I’m not trying to win a Kaggle competition. I’m not carrying out detailed, highly-controlled benchmarking tests. I’m not, in fact, claiming to be doing anything particularly useful at all. This is just me, just playing around with some code, just for the fun of it.
</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-08-23-h2o-ai-going-for-a-paddle/paddle.jpg"></p>
</section>
 ]]></description>
  <category>data</category>
  <category>data science</category>
  <category>H2O</category>
  <category>H2O.ai</category>
  <category>h2o</category>
  <category>MNIST</category>
  <category>sparklyr</category>
  <category>package</category>
  <category>R</category>
  <guid>https://owenjonesuob.github.io/posts/2017-08-23-h2o-ai-going-for-a-paddle/</guid>
  <pubDate>Wed, 23 Aug 2017 11:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2017-08-23-h2o-ai-going-for-a-paddle/paddle.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Adding a Git Bash alias</title>
  <link>https://owenjonesuob.github.io/posts/2017-08-22-adding-a-git-bash-alias/</link>
  <description><![CDATA[ 





<p>I thought I’d share another little time-saving trick I discovered earlier.</p>
<p>When I’m writing code I tend to use Git Bash to run commands, mostly because it (obviously!) works nicely with git and partly because… well, I think it looks nice. It’s so colourful! This is a valid reason for liking something, right?</p>
<p>Anyway, when you run a command in a terminal such as Git Bash, the first word is always an instruction to the terminal. The terminal decides:</p>
<ul>
<li>“Ah, I can do this!” (For <strong>shell commands</strong> such as <code>cd</code>, <code>mkdir</code> and <code>echo</code>); or</li>
<li>“Nominate [program].” (For anything else)</li>
</ul>
<p><img src="https://owenjonesuob.github.io/posts/2017-08-22-adding-a-git-bash-alias/commands.png" class="img-fluid"></p>
<p>Now, my go-to code/plaintext editor is <a href="https://notepad-plus-plus.org/">Notepad++</a>. (It’s great - I’d highly encourage you to have a look!)</p>
<p>Typing <code>notepad [filename]</code> opens the file in Notepad. But typing <code>notepad++ [filename]</code> doesn’t work. Very upsetting.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-08-22-adding-a-git-bash-alias/notfound.gif" class="img-fluid"></p>
<p>There is, however, a simple way to make this work - or, indeed, to add any little shortcut you like. These shortcuts are called <strong>aliases</strong>.</p>
<p>You define aliases in the <code>.bashrc</code> file, which contains settings that are loaded for Git Bash whenever you open it. This file lives in your home directory (in my case, my user folder <code>ojones/</code>) which can be quickly represented by a <code>~</code> in any commands.</p>
<p>If you’ve never edited your <code>.bashrc</code> file before, you might not have one. So first we can quickly create one in our home directory:</p>
<pre><code>touch ~/.bashrc</code></pre>
<p>Then open it with the editor of your choice (for example, vim):</p>
<pre><code>vim ~/.bashrc</code></pre>
<p>Now we’re going to add an alias for Notepad++ by adding the following line to the <code>.bashrc</code> file:</p>
<pre><code>alias npp="/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe"</code></pre>
<p>The string is just the unix-style filepath to where Notepad++ is installed on my computer(notice that we’ve had to escape spaces and parentheses with backslashes). So we’ve just told Git Bash that if it sees the command <code>npp</code> (for “notepad-plus-plus”) it should go to that filepath, which results in it launching Notepad++ for me. Hooray!</p>
<p>But you don’t have to stop there. You can set aliases for anything you like.</p>
<pre><code>alias npp="/c/Program\ Files\ \(x86\)/Notepad++/notepad++.exe";

alias gc="git commit -m \"Lazy commit\"";

alias doggo="printf $'
            ____,\'\`-, \n
      _,--\'   ,/::.: \n
   ,-\'       ,/::,\' \`---.___        ___,_ \n
   |       ,:\'::/        :\'"\`:"\`--./ ,-^.:--. \n
   |:     ,:\':,\'         \'         \`.   :\`   \`-. \n
    \:.,:::/:/ -:.                   \`  | \`     \`-. \n
     \:::,\'//__.:  ,:  ,  ,  :.\`-.   :. |  :       :. \n
      \,\',\':/O)^. :\'  :  :   \'__\` \`  :::\`.       .:\' ) \n
      |,\'  |\__,: :      :  \'/O)\`.   :::\`:       \' ,\' \n
           |\`--\'\'            \__,\' , ::::(       ,\' \n
           \`    ,            \`--\' ,: :::,\'\   ,-\' \n
            | ,:         ,    ,::\'  ,:::   |,\' \n
            |,:        .(          ,:::|   \` \n
            ::\'_   _   ::         ,::/:| \n
           ,\',\' \`-\' \   \`.      ,:::/,:| \n
          | : _  _   |   \'     ,::,\' ::: \n
          | \ O\`\'O  ,\',   ,    :,\'   ::: \n
           \ \`-\'\`--\',:\' ,\' , ,,\'      :: \n
            \`\`:.:.__   \',-\',\'        ::\' \n
               \`--.__, ,::.         ::\' \n
                   |:  ::::.       ::\' \n
                   |:  ::::::    ,::'"</code></pre>
<p>(Having said that, if you want to create aliases specifically for git commands then you might want to use git’s own alias system rather than defining general aliases in <code>.bashrc</code>. There’s a good explanation of how to do that <a href="http://haacked.com/archive/2014/07/28/github-flow-aliases/">here</a>.)</p>



 ]]></description>
  <category>git</category>
  <category>git bash</category>
  <category>alias</category>
  <guid>https://owenjonesuob.github.io/posts/2017-08-22-adding-a-git-bash-alias/</guid>
  <pubDate>Tue, 22 Aug 2017 12:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2017-08-22-adding-a-git-bash-alias/alias.PNG" medium="image"/>
</item>
<item>
  <title>Markov and Churchill: an exploration of predictive text</title>
  <link>https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Let me introduce the “predictive text game”. Play along with me if you like!</p>
<p>Open up a new message on your phone, type in a random word to get started (I’m choosing “the”), and then just keep hitting the top “suggested word” that appears above your keyboard. Here’s my result:</p>
<blockquote class="blockquote">
<p>The following user says thank you for your time and consideration and I will be in the evening of the time to get the same as the first time I am not sure if you have any questions or concerns please visit the lockouts page and the other day and I will ve in the evening of the time to…</p>
</blockquote>
<p>I think it’s pretty cool that your phone can make a good guess at what you’re going to write next. I mean, my phone’s <em>magnum opus</em> is pretty boring and repetitive - hopefully you’ll get something a bit more interesting! But I’m just impressed that it can do this at all.</p>
</section>
<section id="memoryless" class="level2">
<h2 class="anchored" data-anchor-id="memoryless">Memoryless</h2>
<p>Imagine you wake up in a massive field, and all you have with you is a single coin. You have no idea how you got there (the last thing you remember is your mate ordering an obscene number of Jägerbombs) but you don’t care because it seems to be the perfect place for you to demonstrate what a <strong>random walk</strong> is.</p>
<p>You stand up, wait a moment for the pain behind your eyes to subside, take a step forwards and toss the coin. Tails. You turn right, take a step forwards, and toss the coin again. Heads, You turn left, take a step forwards, and toss the coin again…</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/randomwalk.jpg" class="img-fluid"></p>
<p>This is an example of a <strong>memoryless stochastic process</strong> - a stochastic process because your coin-toss results form a series of observations of a random variable, and memoryless because each toss is independent of all the tosses that came before it. “Memoryless stochastic process” is a bit of a mouthful though, so we call them <strong>Markov chains</strong> (after the mathematician Andrey Markov, who studied them in detail in the early 20th Century).</p>
</section>
<section id="markov-chains" class="level2">
<h2 class="anchored" data-anchor-id="markov-chains">Markov chains</h2>
<p>Formally, if it is given that a Markov system is currently in a certain state, then the next state of the system is independent of all previous states. We sometimes talk about “past” and “future” states, because often the series of random variables forming the Markov chain are indexed by timesteps - for example, if you took one step each second while going for your random walk, you would naturally index the first coin toss as “1”, the second as “2”, and so on. You’d also need to be seriously good at coin-tossing.</p>
</section>
<section id="predictive-text" class="level2">
<h2 class="anchored" data-anchor-id="predictive-text">Predictive text</h2>
<p>So, how do Markov chains fit in with predictive text?</p>
<p>Well, in the simplest possible case, we set up the system by making a big dictionary which links every word to all the words which might come after it.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/letsky.jpg" class="img-fluid"></p>
<p>The current “state” of the system is the last word that was typed. We get to the next state by picking one of the associated words at random.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/youarethey.jpg" class="img-fluid"></p>
<p>Actually, because words usually <em>do</em> depend on the words that have come before them, predictive text uses the previous <img src="https://latex.codecogs.com/png.latex?n"> words (usually 2ish) as the current state.</p>
</section>
<section id="lets-do-some-code-already" class="level2">
<h2 class="anchored" data-anchor-id="lets-do-some-code-already">Let’s do some code already</h2>
<p>Okay okay. We’re going to use Python to build a “MarkovGenerator” class: a MarkovGenerator object will take a bunch of text as input and set up the whole predictive-text-style Markov system we’ve just been talking about.</p>
<p>First we need to build our “cache” of states and potential next-states. To do that, first we’ll grab all the groups of <img src="https://latex.codecogs.com/png.latex?n"> consecutive words in our text. The first <img src="https://latex.codecogs.com/png.latex?n-1"> of these words are the “key”, and the last word is the “value”. For example, let’s take the sentence:</p>
<pre><code>Rain down rain down come on rain down on me
 </code></pre>
<p>Choosing <img src="https://latex.codecogs.com/png.latex?n=3">, this would give us</p>
<pre><code>rain down rain
down rain down
rain down come
down come on
come on rain
on rain down
rain down on
down on me</code></pre>
<p>So taking the first 2 words as a key, and the third word as a possible value, we get</p>
<pre><code>rain down  =&gt;  rain, come, on
down rain  =&gt;  down
down come  =&gt;  on
come on    =&gt;  rain
on rain    =&gt;  down
down on    =&gt;  me</code></pre>
<p>This is what <code>tuples()</code> and <code>build_cache()</code> will do in the class we’re building.</p>
<p>Then once we have our MarkovGenerator object, we’ll want to use it to generate some text:</p>
<pre><code>Start with:   on rain  =&gt;  down                             (only possible choice)
                      rain down  =&gt;  come                   (chosen at random from [rain, come, on])
                                down come  =&gt; on            (only possible choice)
                                         come on  =&gt;  rain  (only possible choice)
                   
Result:       on rain down come on rain</code></pre>
<p>So, let’s make the class.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We're going to need to make some random choices later</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MarkovGenerator(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb5-5">    </span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When we create a "MarkovGenerator" object, these things happen:</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, text, tuple_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-8">        </span>
<span id="cb5-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take the input string, and get individual words by splitting it up</span></span>
<span id="cb5-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text</span>
<span id="cb5-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.text.split()</span>
<span id="cb5-12">        </span>
<span id="cb5-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How many words are taken for the current state? (3 by default)</span></span>
<span id="cb5-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tuple_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuple_size</span>
<span id="cb5-15">        </span>
<span id="cb5-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty dictionary, then fill it using build_cache (see below)</span></span>
<span id="cb5-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cache <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.build_cache()</span>
<span id="cb5-19">        </span>
<span id="cb5-20">        </span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all collections of n words</span></span>
<span id="cb5-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tuples(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-23">        </span>
<span id="cb5-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tuple_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.words)):</span>
<span id="cb5-25">            </span>
<span id="cb5-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python</span></span>
<span id="cb5-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.words[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tuple_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tuple_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-28">            </span>
<span id="cb5-29">            </span>
<span id="cb5-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build the cache dictionary        </span></span>
<span id="cb5-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_cache(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-32"></span>
<span id="cb5-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tup <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tuples():</span>
<span id="cb5-34">            </span>
<span id="cb5-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The first n-1 words, as a Python tuple, are the key</span></span>
<span id="cb5-36">            tup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(tup)</span>
<span id="cb5-37">            key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(w <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> w <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tup[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-38">            </span>
<span id="cb5-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cache:</span>
<span id="cb5-40">                </span>
<span id="cb5-41">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the key's already there, add the last word of</span></span>
<span id="cb5-42">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the tuple to the key's list of values</span></span>
<span id="cb5-43">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cache[key].append(tup[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-44">                </span>
<span id="cb5-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-46">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise add a new entry to the cache</span></span>
<span id="cb5-47">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cache[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tup[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb5-48">                </span>
<span id="cb5-49">                </span>
<span id="cb5-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate an output text string            </span></span>
<span id="cb5-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_text(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, length):</span>
<span id="cb5-52">        </span>
<span id="cb5-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random set of n-1 consecutive words to start</span></span>
<span id="cb5-54">        seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.words)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tuple_size)</span>
<span id="cb5-55">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.words[seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>k] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tuple_size)]</span>
<span id="cb5-56">        </span>
<span id="cb5-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up a list for our generated words</span></span>
<span id="cb5-58">        gen_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-59">        </span>
<span id="cb5-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># length is how many words we want in the output</span></span>
<span id="cb5-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(length):</span>
<span id="cb5-62">            </span>
<span id="cb5-63">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pop the first word off the current tuple, and store it</span></span>
<span id="cb5-64">            gen_words.append(current.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb5-65">            </span>
<span id="cb5-66">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the rest of the tuple as the key to choose the next</span></span>
<span id="cb5-67">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># word (randomly!), and stick that word onto the end of the tuple</span></span>
<span id="cb5-68">            current.append(random.choice(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cache[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(current)]))</span>
<span id="cb5-69">        </span>
<span id="cb5-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stick all the generated words together and return!</span></span>
<span id="cb5-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(gen_words)</span></code></pre></div>
</section>
<section id="the-greatest-briton" class="level2">
<h2 class="anchored" data-anchor-id="the-greatest-briton">The Greatest Briton</h2>
<p>We’ve got our generator, but before it can generate anything we need to give it something to read!</p>
<p>How about some material from the greatest Brit in history, as voted for by the Great British public in a <a href="https://en.wikipedia.org/wiki/100_Greatest_Britons">BBC television poll</a> in 2002?</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/dog.jpg" class="img-fluid"></p>
<p>Hmm.</p>
<pre><code>Start with:   oh yes  =&gt;  oh                         (only possible choice)
                      yes oh  =&gt;  yes                (only possible choice)
                               oh yes  =&gt;  oh ...    (only possible choice)

Result:       oh yes oh yes oh yes oh yes oh yes ...</code></pre>
<p>No.&nbsp;Let’s not do that. Let’s stick to the original plan.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/churchill.jpg" class="img-fluid"></p>
</section>
<section id="soup-and-cigars" class="level2">
<h2 class="anchored" data-anchor-id="soup-and-cigars">Soup and cigars</h2>
<p>Churchill’s parliamentary speeches are available online on the website of <a href="http://www.churchill-society-london.org.uk/">The Churchill Society</a>. I’m going to use the <code>beautifulsoup4</code> Python module to do some web scraping.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span></code></pre></div>
<p>In order to get the speeches we’ll need to figure out the layout of each page, so let’s just look at one speech for now.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">locusts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.churchill-society-london.org.uk/Locusts.html"</span></span>
<span id="cb8-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(locusts)</span>
<span id="cb8-3">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's have a look...</span></span>
<span id="cb8-6">soup</span></code></pre></div>
<pre class="text"><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;The Churchill Society London. Churchill's Speeches.&lt;/title&gt;
&lt;x-sas-window bottom="768" left="57" right="868" top="138"&gt;
&lt;meta content="text/html; 
charset=utf-8" http-equiv="Content-Type"/&gt;
&lt;/x-sas-window&gt;&lt;/head&gt;

[... loads more, I've truncated!]

&lt;h4&gt;&lt;center&gt;&lt;font face="Times" size="-1"&gt;12 November 1936&lt;/font&gt;
&lt;/center&gt;&lt;/h4&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;font face="Times"&gt;I have, with some friends, put an
Amendment on the Paper. It is the same as the Amendment which I
submitted two years ago, and I have put it in exactly the same terms
because I thought it would be a good thing to remind the House of
what has happened in these two years. Our Amendment in November 1934
was the culmination of a long series of efforts by private Members

[... more...]

&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;center&gt; &lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt; &lt;/center&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>We’ll use HTML tags to narrow down our selection as much as possible. The content we want is contained within <code>&lt;blockquote&gt;</code> tags, and each paragraph is wrapped in <code>&lt;font&gt;</code> tags.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the text from between each pair of &lt;font&gt; tags within the &lt;blockquote&gt; tags</span></span>
<span id="cb10-2">speech_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [passage.get_text() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> passage <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> soup.blockquote.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"font"</span>)]</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Join all the paragraphs together into one long string</span></span>
<span id="cb10-5">speech_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(speech_raw)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "Chop off" the irrelevant info at the bottom</span></span>
<span id="cb10-8">speech_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> speech_raw.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..................."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb10-11">speech_raw[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>]</span></code></pre></div>
<pre><code>'I have, with some friends, put an\nAmendment on the Paper. It is the same as the Amendment which I\nsubmitted two years ago, and I have put it in exactly the same terms\nbecause I thought it would be a g'</code></pre>
<p>This is looking good, except we have some randomly scattered newline characters (<code>\n</code>) mixed in with the great man’s words. We’ll use a regular expression to tidy them up.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compile the regex: maybe some whitespace, then \n, then maybe more whitespace</span></span>
<span id="cb12-4">newline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\s*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n\s*"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sub each instance of the regex for a single space</span></span>
<span id="cb12-7">speech <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newline.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, speech_raw)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb12-10">speech[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>]</span></code></pre></div>
<pre><code>'I have, with some friends, put an Amendment on the Paper. It is the same as the Amendment which I submitted two years ago, and I have put it in exactly the same terms because I thought it would be a g'</code></pre>
<p>Marvellous.</p>
<p>Now we turn our attention to the site’s index page, and the links to the individual speech pages.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/spchindx.jpg" class="img-fluid"></p>
<p>The speech pages are all accessed by these “OPENSml.Jpeg” image buttons. So we need to get all the link (<code>&lt;a&gt;</code>) elements that contain one of these buttons, and then take the <code>href</code> attribute from each of these link elements.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">speech_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.churchill-society-london.org.uk/SpchIndx.html"</span></span>
<span id="cb14-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(speech_index)</span>
<span id="cb14-3">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the "OPENSml" images; get their parents (the links); get the href attribute</span></span>
<span id="cb14-6">speech_urls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [url.parent[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"href"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> url <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"img"</span>, src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OPENSml.Jpeg"</span>)]</span>
<span id="cb14-7">speech_urls</span></code></pre></div>
<pre><code>['Webmap.html',
 'Locusts.html',
 'Austria.html',
 'Munich.html',
 'RusnEnig.html',
 'Joybells.html',
 'BdTlTrsS.html',
 'BeYeMofV.html',
 'Dunkirk.html',
 'UnknWarr.html',
 'FnstHour.html',
 'thefew.html',
 'ToCzechP.html',
 'LaFrance.html',
 'DthChbln.html',
 'GutTools.html',
 'LngHrdWr.html',
 'CptsSoul.html',
 'NEVER.html',
 'Congress.html',
 'HoCJan42.html',
 'EndoBegn.html',
 'InvaFrnc.html',
 'DthRovlt.html',
 '13May45.html',
 'EndofWar.html',
 'YrVictry.html',
 'Revw1945.html',
 'Fulton.html',
 'astonish.html',
 'WSCHague.html',
 'HonAmrcn.html',
 'Honour.html']</code></pre>
<p>Now we want to go to each of these pages (except the first one, which is a link to the site map) and get the speech, just like we did for the “Locusts” speech a minute ago.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">speech_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> url <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> speech_urls[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]:</span>
<span id="cb16-4">    </span>
<span id="cb16-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append the local url to the site's base url</span></span>
<span id="cb16-6">    full_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.churchill-society-london.org.uk/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> url</span>
<span id="cb16-7">    </span>
<span id="cb16-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the page</span></span>
<span id="cb16-9">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(full_url)</span>
<span id="cb16-10">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb16-11">    </span>
<span id="cb16-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the speech to the list</span></span>
<span id="cb16-13">    speech_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [passage.get_text() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> passage <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> soup.blockquote.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"font"</span>)]</span>
<span id="cb16-14">    speech_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>.join(speech_raw).split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"..................."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb16-15">    </span>
<span id="cb16-16">    newline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\s*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n\s*"</span>)</span>
<span id="cb16-17">    speech <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newline.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, speech_raw)</span>
<span id="cb16-18">    </span>
<span id="cb16-19">    speech_list.append(speech)</span></code></pre></div>
<p>Finally, let’s stick all these speeches together into one massive long Churchillian superspeech.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">speeches_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>.join(speech_list)</span>
<span id="cb17-2">speeches_str</span></code></pre></div>
<pre><code>'I have, with some friends, put an Amendment on the Paper. It is the same as the Amendment which I submitted two years ago, and I have put it in exactly the same terms because I thought... [truncated]</code></pre>
</section>
<section id="you-ask-what-is-our-aim-i-can-answer-in-one-word-victory" class="level2">
<h2 class="anchored" data-anchor-id="you-ask-what-is-our-aim-i-can-answer-in-one-word-victory">You ask, what is our aim? I can answer in one word: Victory</h2>
<p>The time has come to create our Churchill-inspired MarkovGenerator.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">winston <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MarkovGenerator(speeches_str, tuple_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<p>Fingers crossed. Here we go.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> winston.generate_text(length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb20-2">text</span></code></pre></div>
<blockquote class="blockquote">
<p>“and to warn His Majesty’s Government, I make no promises. In no way have I mitigated the sense of the Government had begun. I am not at all costs, victory, in spite of the world to see, the military industries and communications of Germany and to be worthy of their devotion and their courage. The hospital ships, which brought off many thousands of millions of armed and trained men, for whom he works and contrives. The awful ruin of Europe, including-I say deliberately-the German and Italian resources. This is what the cost, who never flinched under the German Air Force, had to be, incomparably the strongest possible resistance from the west, the enemy wherever he may have in respect of long-distance bombing aeroplanes and that France has yet been given to us to draw more readily upon our shipping virtually undiminished, and with the comfort of knowing that his country had ever formed. So in doing this and for the very large part of what happened at sea, and a war leader. I felt encompassed by an exaltation of spirit which was not denied to their care. But all depends now upon the routes nearer home, and to its close. In its place we are to stir the English-speaking Commonwealths be added to one of the war. I should like to do. That is what they are being slowly compressed, and we see with our shipping virtually undiminished, and with the magnificent efforts of the nation free as soon as possible. Secondly, the presence of these Balkan countries where only one which has overtaken her and we shall fight in France, and what might now shower immeasurable material blessings upon mankind, may even do him some good. It certainly offers a measure of agreement between us, and we shall defend every” — <code>winston</code><em>, July 2017</em></p>
</blockquote>
<p>Admittedly, it’s not quite up to the standard of the man himself. But you can feel his presence behind the semi-nonsense. Maybe.</p>
</section>
<section id="to-improve-is-to-change-to-be-perfect-is-to-change-often" class="level2">
<h2 class="anchored" data-anchor-id="to-improve-is-to-change-to-be-perfect-is-to-change-often">To improve is to change; to be perfect is to change often</h2>
<p>I lied earlier.</p>
<p>In reality, your modern phone’s predictive text isn’t a truly random Markov process.</p>
<p>That’s because your phone is clever: not only does it store the possibilities for the following word, but also the relative likeliness of each word being the one you want. For example:</p>
<pre><code>fish and  =&gt;  chips, 0.999
              quinoa, 0.001
              ...
              </code></pre>
<p>And then it might suggest the top 3 words in this list to you while you’re typing.</p>
<p>Indeed, sometimes your phone is even cleverer than that. If you choose one of the suggestions more often than another, it will update the probabilites to better represent your personal use. Or if you ignore its suggestions and type something that isn’t in its cache already, it will add your new word to the cache and remember it for next time.</p>
<p>Nevertheless, the Markov process we’ve explored in this post is there in the background, and without it, predictive text technology wouldn’t have reached the point where it is today. And we wouldn’t have any of the <a href="http://trump.frost.works/">other more amusing applications</a> of Markov chains for text generation either.</p>
<hr>
</section>
<section id="footnote-lockouts-page" class="level2">
<h2 class="anchored" data-anchor-id="footnote-lockouts-page">Footnote: Lockouts page?</h2>
<p>At the top of this post, when I played the predictive text game, the phrase “lockouts page” produced itself. I was fairly sure I’d never typed that. What even is a lockouts page?</p>
<p>When I tried to find an answer for that question, I found something interesting…</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/lockouts.jpg" class="img-fluid"></p>
<p>It seems my “personal” predictive text suggestions aren’t actually very personalised. I’m actually quite relieved, because this discovery has reassured me that if I am indeed really boring and repetitive then everyone else using an Android phone is too.</p>
<hr>
</section>
<section id="bonus-define-funny" class="level2">
<h2 class="anchored" data-anchor-id="bonus-define-funny">Bonus: define “funny”</h2>
<p>We can make a MarkovGenerator object with any text string we like. So I tried out a couple of others, including <a href="http://www.gutenberg.org/ebooks/29765">Webster’s Unabridged English Dictionary</a>. Here are some of my favourite “definitions” the <code>webster</code> MarkovGenerator came up with.</p>
<ul>
<li><p><strong>ANNECTENT</strong> An*nec”tent, a.</p>
<p>Etym: [Pref. re- + center.]</p>
<p>Defn: To predict or foretell; characterized by inflammation of the sun.</p></li>
<li><p><strong>ANTHOLOGIST</strong> An*thol”o*gist, n.</p>
<p>Defn: The quality of being persecuted.</p></li>
<li><p><strong>BLACKBIRDING</strong> Black”bird*ing, n.</p>
<p>(Chem.) Defn: The quality or state of being health.</p></li>
<li><p><strong>HORNPIKE</strong> Horn”pike`, n.</p>
<p>Defn: The supraoccipital bone.</p></li>
<li><p><strong>IMPLAUSIBILITY</strong> Im*plau`si*bil”i*ty, n.</p>
<p>Defn: A delicate person; a swell neighborhood.</p></li>
<li><p><strong>JEWELER</strong> Jew”el*er, n.</p>
<p>Etym: [Cf. Chatter.]</p>
<ol type="1">
<li>To decorate with stucco, or fine hair, for removing substances from organic material and spiritual rulers, now used ironically or contemptuously.</li>
</ol></li>
<li><p><strong>MESSENGER</strong> Mes”sen*ger, n.</p>
<p>Etym: [Ar.]</p>
<p>Defn: An instrument which is assumed to pervade all space.</p></li>
<li><p><strong>POTPOURRI</strong> Pot`pour`ri”, n.</p>
<p>Etym: [L., silkworm.</p>
<p>See Silkworm.</p></li>
</ul>


</section>

 ]]></description>
  <category>Python</category>
  <category>webscraping</category>
  <category>text generation</category>
  <category>markov</category>
  <guid>https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/</guid>
  <pubDate>Sun, 23 Jul 2017 18:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2017-07-23-markov-and-churchill-an-exploration-of-predictive-text/churchill.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Token Update</title>
  <link>https://owenjonesuob.github.io/posts/2017-07-08-a-token-update/</link>
  <description><![CDATA[ 





<p>Hi.</p>
<p>It’s been a little while since you’ve heard from me… well, actually, approaching six months since I last posted, and over four months since this website had any sort of update. Life’s been busy lately, what with maths and revision and maths and exams and maths and such.</p>
<p>Anyway, I have some exciting news! A couple of weeks ago, I started a work placement at <a href="http://www.mango-solutions.com">Mango Solutions</a>, a data science consultancy based in Chippenham (some of you might know of the EARL conferences which they organise every year). It’s a great place and a great bunch of people, and I am very excited to be joining them for the next twelve months!</p>
<p>An added bonus of being out on placement for the year is that I will have a slightly more regular structure to my weeks - no maths problem sheets to be wrestling with all weekend! - so I’ll have more time to do fun data-ML-coding-type stuff. There’s plenty in the pipeline: stay tuned!</p>
<p>Finally, it was just over a year ago that I was chatting to a friend about “data science” and “machine learning”, and thinking “that sounds cool but I literally have no idea what that means”. Now it’s my job. This year has been amazing, and I want to say thank you to everyone who’s ever come across this website, or liked a tweet, or written a post/given a talk that’s inspired me, or who I’ve met at <a href="http://www.meetup.com/Bath-Machine-Learning-Meetup">BMLM</a>, or who I’ve bored half to death talking about neural networks. Thank YOU, dear reader. Hasta pronto.</p>



 ]]></description>
  <guid>https://owenjonesuob.github.io/posts/2017-07-08-a-token-update/</guid>
  <pubDate>Sat, 08 Jul 2017 11:00:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2017-07-08-a-token-update/neuronscrop.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Summary of 30 Days, 30 Visualizations, 1 Dataset</title>
  <link>https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Last November, the <a href="https://www.meetup.com/Bath-Machine-Learning-Meetup/">Bath Machine Learning Meetup</a> kicked off its first project: to use the <a href="https://data.bathhacked.org/Government-and-Society/BANES-Historic-Car-Park-Occupancy/x29s-cczc">BANES Historic Car Park Occupancy</a> dataset to predict the occupancy of car parks at a given time in the future.</p>
<p>Since mid-October 2014 the occupancy of each of eight car parks in Bath has been recorded every five minutes. Therefore the aforementioned dataset is pretty large, and constantly growing: it currently contains over 1.6 million records.</p>
<p>Before we began doing any serious work on the machine learning aspect of the project, I thought it would be a good idea to investigate the data we will be using; and inspired by similar analyses I had come across online I decided that I would try to produce one visualization of the data each day for one month.</p>
<p>If you are interested in the full, nitty-gritty, R-splattered details of how I went about this then feel free to have a look through <a href="../../posts/2016-11-12-30-days-30-visualizations-1-dataset-part-1/index.html">my original posts</a>. What follows here is a somewhat condensed version highlighting the interesting bits!</p>
</section>
<section id="trends-in-car-park-occupancy" class="level2">
<h2 class="anchored" data-anchor-id="trends-in-car-park-occupancy">Trends in car park occupancy</h2>
<p>I started off by having a look at some of the general trends in the data, such as how full each car park is, on average, on each day of the week.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day26.jpeg" class="img-fluid"></p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day27.jpeg" class="img-fluid"></p>
<p>As you might expect, in general the car parks tend to fill during the morning and empty in the afternoon, with most reaching their peak occupancy at about 13:00. However, there are some subtle points of interest here.</p>
<p>For example, during the working week the “peak” for SouthGate Rail car park is noticeably broader and squarer than those of the other car parks. This is due to the fact that SouthGate Rail is used only by railway commuters: therefore it tends to fill up quickly early in the morning, and then empty quickly later in the evening.</p>
<p>However, if we compare this to the weekend we see that SouthGate Rail is not so busy and instead the Podium and SouthGate General car parks tend to be busiest - this perhaps isn’t surprising, seeing as these are the closest car parks to the town centre and therefore are generally used by people visiting the local shops. Interestingly Friday is closer to this pattern than it is to the other weekdays, suggesting perhaps that Friday is a popular day to work from home.</p>
<p>The dataset also includes a “Status” column, indicating the change in occupancy from one record to the next (although this doesn’t seem to be recorded correctly for Podium car park).</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day28.jpeg" class="img-fluid"></p>
<p>This helps us to see how “dynamic” the occupancy of each car park is: for example, SouthGate Rail and the P+R car parks spend a significant amount of time as “Static” (meaning that there was no net change in occupancy from the previous record), whereas the shopping car parks such as SouthGate General spend more time filling or emptying. While “Static” doesn’t necessarily mean no cars entered or exited, this still gives us a good idea of which car parks have a higher turnaround of cars.</p>
<p>So far we’ve been looking at a breakdown by weekday, but we can see other interesting trends if we look at different time periods. The plot below shows the average occupancy of each car park in each week of the year (the label shows the week with the highest average occupancy).</p>
<p>While we see some wild fluctuations, there is a point worth noting here: the P+R car parks in particular tend to be used most around weeks 46-48, which translates to the latter half of November through to early December. I have absolutely no idea why this is the case.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day29.jpeg" class="img-fluid"></p>
</section>
<section id="dubious-records" class="level2">
<h2 class="anchored" data-anchor-id="dubious-records">Dubious records</h2>
<p>On the surface, these trends shine through; the result of taking averages of various combinations of over 1.6 million records. But dig a little deeper and it turns out that like any genuine real-life dataset, this one is full of quirks.</p>
<p>Let’s strip down that last chart and just look at one car park: Newbridge P+R.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day08.jpeg" class="img-fluid"></p>
<p>It’s clear that we have some outlying points here. It turns out that if we start looking for them, then there are quite a lot of “strange” occupancies.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day11.jpeg" class="img-fluid"></p>
<p>Whereas a car park at 0% or 100% capacity might not be <em>too</em> unusual, a car park at more than 100% capacity shouldn’t be too common. Having said that, on occasion this can be explained - as <a href="https://github.com/BathHacked/documentation/wiki/Bath-Car-Park-Data">the dataset’s documentation</a> notes - by cars being parked in unofficial spaces, or by cars prowling full car parks in hope of nabbing a spot as someone else leaves. (Notice most of the full/overfilled records are from the shopping car parks.)</p>
<p>But we also have a large number of records where there were somehow fewer than zero cars in the car park. Obviously when this happens there must have been some sort of error - and in most cases, the method of data collection is the culprit.</p>
<p>Again referring to the documentation we learn that occupancy is measured by keeping a running total of two counts - entries and exits. For each car park, there is a sensor on each gate. When a car goes in, we add 1 to the occupancy, and when a car leaves, we subtract 1. Simple enough, and generally effective.</p>
<p>Every so often though one of these sensors fails, and we end up with a monotonic increase or decrease in occupancy until someone notices and runs down to the offending car park to change the sensor. The occupancy is then manually recalibrated (this happens on occasion anyway, usually overnight). Broken sensors explain the vast majority of the remaining “strange” records - in the case of the negative occupancy records, 99.8% of them are relatively close to zero.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day13.jpeg" class="img-fluid"></p>
<p>But then again, some <em>aren’t</em> relatively close to zero. The 26 records where an occupancy of about -15000 is recorded all come from SouthGate General car park, from a single afternoon - there is just an immediate drop from one record to the next, and then an immediate rise a couple of hours later. But even if we shift the records back up to approximately where they should be (by adding about 15220 to the recorded occupancy) we can see that they don’t line up with the records on either side.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day16.jpeg" class="img-fluid"></p>
<p>OK, in case it wasn’t clear, I wasn’t entirely serious earlier when I said I didn’t know why the P+Rs were busiest in early December (I think anyone who’s lived in Bath knows why!). However, in the case of these rogue records I genuinely have no idea why they are so wrong; my best guess is some sort of error in the process of uploading the records from the sensors to the online database.</p>
<p>I can also now confess that the plots which appear in the first section of this piece are based on a somewhat tidied version of the data where I have removed any dubious records. These records do have an effect on calculated averages, as can be seen by comparing the plots below - the second plot is identical to the plot from earlier, the first is the same plot but with dubious records included.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day04fixed.jpeg" class="img-fluid"></p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day26.jpeg" class="img-fluid"></p>
</section>
<section id="repeated-records" class="level2">
<h2 class="anchored" data-anchor-id="repeated-records">Repeated records</h2>
<p>There are two date-time values associated with each record: LastUpdate, which is the time that the record was taken, and DateUploaded, which is the time that the record was uploaded to the Bath Hacked datastore.</p>
<p>In theory, a new record is taken at each car park every 5 minutes, and then the eight new records are uploaded to the datastore in a batch shortly afterwards. In reality, a new record is <em>usually</em> taken every 5 minutes, and the <em>most recent</em> record from each car park is <em>usually</em> uploaded in a batch shortly afterwards.</p>
<p>Occasionally a new record is not taken before the next upload is due. When this occurs the previous record is just uploaded again - with the same LastUpdate time, but a new DateUploaded time. This ensures that a fresh batch of 8 records (one from each car park) is added to the datastore every 5 minutes.</p>
<p>Therefore if we judge the “uniqueness” of a record by LastUpdate we end up with quite a few duplicate records. In fact about 17% of all records in the dataset are repeated uploads. The vast majority of records which <em>are</em> repeated are only repeated once; but in the most extreme cases the same record is uploaded over 1000 times before a new record is taken.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day17.jpeg" class="img-fluid"></p>
<p>The delay between LastUpdate and DateUploaded is generally very short, as expected; but sometimes a very long time can pass before a new record is taken. Don’t be <em>too</em> shocked by the graph below - it uses a log scale on the y-axis, so the overwhelming majority of records are uploaded shortly after being taken. However, if no new record is taken in a 5-minute interval then a repeat record is uploaded instead, so the difference between LastUpdate and DateUploaded increases: the largest difference is over 300000 seconds (which equates to about 3.5 days).</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day20log.jpeg" class="img-fluid"></p>
<p>We can see that there are also a surprisingly large number of records where the record was apparently uploaded to the datastore before it was actually recorded. All such records are from the two SouthGate car parks, but again I don’t have a good explanation for why this occurs.</p>
<p>Now, just a few short paragraphs ago I claimed that every batch uploaded to the datastore contained 8 records. Alas, once again I was slightly deceitful: on occasion there are batches containing as few as 4 records.</p>
<p><img src="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day23.jpeg" class="img-fluid"></p>
<p><em>(Note: the y-axis label on the right-hand plot should more accurately read: “Of all the records which were uploaded to the datastore in a batch of this size, the proportion which came from each of the car parks”. But this is rather a mouthful.)</em></p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing thoughts</h2>
<p>I was pleasantly surprised when I was asked to produce this write-up for Bath Hacked. While carrying out this project I never really thought I was producing something that other people would eventually be interested in reading!</p>
<p>I’m not ashamed to admit that when I set out upon this prolonged analytical journey back in early November I didn’t really know what I was doing. To begin with I intended it to be purely a learning exercise; a means of improving my data manipulation and visualization skills using R. And it did indeed serve this purpose very well.</p>
<p>However, once I began investigating the dataset in more and more detail, I found myself becoming more and more interested in what I was finding, and more and more focused in what I was looking for. When I finished the project thirty days after I began, I was relieved to be free of the burden of it, but simultaneously a little sad that a previously (admittedly briefly) constant part of my life would now be something to look back on rather than forward to.</p>
<p>I suppose if you spend enough time with anything and get to know it well enough you risk becoming somewhat emotionally attached to it.</p>
<hr>
<p><em>This post was featured on the <a href="https://www.bathhacked.org/">Bath: Hacked blog</a> (and if you want to read it again there, by all means feel free to do so! You can find it <a href="https://www.bathhacked.org/projects/show-and-tell/30-days-30-visualization-1-dataset/">here</a>).</em></p>


</section>

 ]]></description>
  <category>data</category>
  <category>R</category>
  <category>visualization</category>
  <guid>https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/</guid>
  <pubDate>Fri, 27 Jan 2017 01:52:00 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/day01.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Snippets in RStudio</title>
  <link>https://owenjonesuob.github.io/posts/2017-01-21-snippets-in-rstudio/</link>
  <description><![CDATA[ 





<p>
I know, I know, this is probably old news to must regular users of RStudio. But these things are so useful - how had I not heard about them before?
</p>
<p>
In short, “code snippets” are little abbreviations that you can use when writing your code. You type a few letters and then hit TAB, in the same way you do to autocomplete functions; but a snippet can be used to insert a whole code template, for example, a <code>for</code> loop or <code>switch</code> statement.
</p>
<p>
And what’s more, you can add your own snippets! Within the Code tab of the global options menu, there’s a little “Edit snippets” button:
</p>
<img src="https://owenjonesuob.github.io/posts/2017-01-21-snippets-in-rstudio/codemenu.jpg" alt="codemenu">
<p>
And then you can see the built-in snippets (in a whole bunch of languages), and add your own. <a href="https://support.rstudio.com/hc/en-us/articles/204463668-Code-Snippets">This post from RStudio</a> explains the syntax (and, indeed, explains the whole concept of snippets better than I have done here!).
</p>
<p>
In my case, I wanted a quick way to add section dividers to my R scripts: so I’ve defined three new snippets for “single-” and “double-divider” and for a “heading” divider.
</p>
<img src="https://owenjonesuob.github.io/posts/2017-01-21-snippets-in-rstudio/snippets.jpg">
<p>
Which work like so:
</p>
<img src="https://owenjonesuob.github.io/posts/2017-01-21-snippets-in-rstudio/dvgif.gif">
<p>
Type two letters, hit TAB. Much quicker than holding down the equals key!
</p>



 ]]></description>
  <category>options</category>
  <category>R</category>
  <category>RStudio</category>
  <category>snippets</category>
  <guid>https://owenjonesuob.github.io/posts/2017-01-21-snippets-in-rstudio/</guid>
  <pubDate>Sat, 21 Jan 2017 12:36:59 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2017-01-21-snippets-in-rstudio/snippetsopt.PNG" medium="image"/>
</item>
<item>
  <title>BANEScarparking - an R package</title>
  <link>https://owenjonesuob.github.io/posts/2017-01-13-banescarparking-an-r-package/</link>
  <description><![CDATA[ 





<p>
Happy new year everyone!
</p>
<p>
January exams are imminent, so I should be revising. Therefore I have written an R package…
</p>
<p>
Admittedly it is a little bit niche, but hopefully it will prove useful for the machine learning project I’m working on with BMLM (I have mentioned this project before - it was part of my motivation for <a href="../../posts/2017-01-27-summary-of-30-days-30-visualizations-1-dataset/index.html">TDTVOD</a>).
</p>
<p>
The package isn’t currently on CRAN (one day maybe!) but v0.1.1 can be found on GitHub here:
</p>
<a href="https://github.com/owenjonesuob/BANEScarparking">https://github.com/owenjonesuob/BANEScarparking</a>
<p>
and you can install it with
</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owenjonesuob/BANEScarparking"</span>)</span></code></pre></div>
<hr>
<h4 class="anchored">
UPDATE (23/01/2018)
</h4>
<p>
There have been loads of awesome updates to <code>BANEScarparking</code> since it was first released!
</p>
<p>
And <code>BANEScarparkinglite</code>, the dataless version, totally <em>is</em> on CRAN :D
</p>
<p>
You can find it here: <a href="https://cran.r-project.org/package=BANEScarparkinglite">https://cran.r-project.org/package=BANEScarparkinglite</a>
</p>
<p>
So if you ever feel an urgent desire to analyse Bath &amp; North East Somerset’s historical parking records, you know what to do.
</p>



 ]]></description>
  <category>data</category>
  <category>data science</category>
  <category>GitHub</category>
  <category>package</category>
  <category>R</category>
  <category>RStudio</category>
  <guid>https://owenjonesuob.github.io/posts/2017-01-13-banescarparking-an-r-package/</guid>
  <pubDate>Fri, 13 Jan 2017 10:53:25 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2017-01-13-banescarparking-an-r-package/libraryBANES.PNG" medium="image"/>
</item>
<item>
  <title>30 Days, 30 Visualizations, 1 Dataset: Days 26-30</title>
  <link>https://owenjonesuob.github.io/posts/2016-12-07-30-days-30-visualizations-1-dataset-part-6/</link>
  <description><![CDATA[ 





<h3 class="anchored">
Day 26 (07/12/16): Mean occupancy by weekday revisited
</h3>
<p>
We’re on the home straight!
</p>
<p>
Partly due to lack of time, partly due to lack of new ideas, and mostly because I want to, I am going to spend the last five days of this project revisiting some of the earlier plots I made, tidying them up and using cleaned data.
</p>
<p>
Let’s make this “cleaned data” - having spent the last couple of weeks looking at what makes the data messy, I’m now in a much better position to do this than I would have been at the start!
</p>
<code>rdf1 &lt;- select(df0, Name, LastUpdate, DateUploaded,               Capacity, Occupancy, Percentage, Status) %&gt;%     mutate(LastUpdate = as.POSIXct(LastUpdate,                                    format = "%d/%m/%Y %I:%M:%S %p"),            DateUploaded = as.POSIXct(DateUploaded,                                      format = "%d/%m/%Y %I:%M:%S %p")) %&gt;%     # Cleaning:     #   Remove single (?) row with NA     filter(!is.na(LastUpdate)) %&gt;%     #   Remove "strange" occupancies ("strange" is arbitrary...)     filter(Occupancy &gt; -100) %&gt;%     filter(Percentage &lt; 110) %&gt;%     #   Remove duplicates     group_by(Name, LastUpdate) %&gt;%     slice(1L) %&gt;%     ungroup()</code>
<p>
I’ll start by replotting Day 04. This time around I will use <code>dplyr</code> rather than base functions to prepare the data. I’ll also make sure to include an x-axis on each plot, and I won’t have any issues with my faceting this time either!
</p>
<p>```rdf2 &lt;- select(df1, Name, Percentage, LastUpdate) %&gt;% filter(Name != “test car park”) %&gt;% mutate(Time = (hour(LastUpdate) + round(minute(LastUpdate), -1)/60), Day = wday(LastUpdate, label = TRUE)) %&gt;% group_by(Name, Day, Time) %&gt;% summarize(X = mean(Percentage))</p>
p &lt;- ggplot(df2, aes(x = Time, y = X)) + geom_line(aes(colour = Name)) + facet_wrap(~ Day, nrow = 2, scales = “free_x”) + ggtitle(“Mean occupancy by weekday”) + labs(y = “Percentage occupancy”, x = “Time (hour)”) + theme(plot.title = element_text(size = rel(1.8))) + guides(colour = guide_legend(override.aes = list(size = 3))) p```
<p>
<img src="https://owenjonesuob.github.io/posts/2016-12-07-30-days-30-visualizations-1-dataset-part-6/day26.jpeg">
</p><hr>
<h3 class="anchored">
Day 27 (08/12/16): Occupancy per weekday by car park, revisited
</h3>
<p>
Revisiting Day 05. The alpha levels are scaled much better now there are no outlying data points.
</p>
<p><code>rp &lt;- ggplot(data = df2, aes(Time, y = Day)) +     facet_wrap(~ Name, nrow = 2, scales = "free_x") +     geom_point(aes(colour = Name, alpha = X), shape = 20, size = 4) +     guides(colour = guide_legend(override.aes = list(size = 3))) +     scale_alpha(range = c(0, 1)) +     scale_y_discrete(limits = rev(levels(df2$Day))) +     labs(x = "Time (hour)", y = "") +     ggtitle("Occupancy per weekday, by car park") +     theme(plot.title = element_text(size = 22, face = "bold"),           legend.position = "None") p</code></p>
<img src="https://owenjonesuob.github.io/posts/2016-12-07-30-days-30-visualizations-1-dataset-part-6/day27.jpeg">
<hr>
<h3 class="anchored">
Day 28 (09/12/16): Status by weekday, revisited
</h3>
<p>
Again, just tidying up a little and using the clean data.
</p>
<p>```rlibrary(lubridate) library(reshape2) library(scales)</p>
<p>df2 &lt;- select(df1, Name, LastUpdate, Status) %&gt;% filter(Name != “test car park”) %&gt;% mutate(Day = wday(LastUpdate, label = TRUE)) %&gt;% group_by(Name, Day) %&gt;% summarize(Filling = sum(Status == “Filling”) / n(), Static = sum(Status == “Static”) / n(), Emptying = sum(Status == “Emptying”) / n()) %&gt;% melt()</p>
p &lt;- ggplot(df2, aes(x = Day, y = value, fill = variable)) + geom_bar(stat = “identity”) + coord_flip() + facet_wrap(~ Name, nrow = 2) + scale_fill_manual(values = c(“#FF4444”, “#AAAAAA”, “#6666FF”)) + scale_x_discrete(limits = rev(levels(df2$Day))) + scale_y_continuous(labels = percent) + labs(y = “Percent of records”, x = “Day”, fill = ““) + ggtitle(”Status by weekday”) + theme(plot.title = element_text(size = 22, face = “bold”)) p``` <img src="https://owenjonesuob.github.io/posts/2016-12-07-30-days-30-visualizations-1-dataset-part-6/day28.jpeg">
<hr>
<h3 class="anchored">
Day 29 (10/12/16): Mean percentage occupancy by week, revisited
</h3>
<p>
Revisiting Day 09. The lines are, generally speaking, a little smoother now.
</p>
<p>```rdf2 &lt;- select(df1, Name, LastUpdate, Percentage) %&gt;% filter(Name != “test car park”) %&gt;% mutate(Week = week(LastUpdate)) %&gt;% group_by(Name, Week) %&gt;% summarize(meanP = mean(Percentage))</p>
<p>maxP &lt;- top_n(df2, n = 1)</p>
p &lt;- ggplot(df2, aes(x = Week, y = meanP)) + geom_line() + facet_wrap(~ Name, nrow = 2) + geom_label(data = maxP, aes(x = Week, y = meanP + 10, label = Week)) + ggtitle(“Mean percentage occupancy per week”) + ylab(“Percentage”) + theme(plot.title = element_text(size = 22, face = “bold”)) p``` <img src="https://owenjonesuob.github.io/posts/2016-12-07-30-days-30-visualizations-1-dataset-part-6/day29.jpeg">
<hr>
<h3 class="anchored">
Day 30 (11/12/16): The End
</h3>
<p>
Well, here I am. One month later.
</p>
<p>
This has probably been the hardest project I’ve attempted to date.
</p>
<p>
I say that not because the learning has been particularly challenging, although obviously I was learning ‘on-the-go’.
</p>
<p>
It’s tempting to say that the most difficult aspect was coming up with new ideas and new ways to explore a pretty limited set of data. In a way it is fortunate that there were so many messy and anomalous records to explore, or I would have been running out of ideas within two weeks.
</p>
<p>
But actually, the hardest thing about this project was finding the time and motivation each day to spend a couple of hours, an hour, even 20 minutes working on it - when really, true (as per usual!) to this website’s general theme, I should have been doing other things.
</p>
<p>
Having said that, I’ve done it! I stuck with it. I have (approximately) 30 plots to prove it, as well as a much better command of ggplot and dplyr for manipulating and visualizing data in the future. And hopefully some of the knowledge I’ve gained about the dataset will come in useful for the Bath ML Meetup project.
</p>
<p>
I thought I’d round off by sharing some of my ideas and doodles from when I was just starting out.
</p>
<div id="day301" class="photoib">

</div>
<div id="day302" class="photoib">

</div>
<div id="day303" class="photoib">

</div>
<p>
I’m now facing a busy month or two of revision and exams, so I can’t say for sure when my next project will materialize (to be truthful they tend to be fairly spontaneous anyway…) - so until then, fare thee all well, and best wishes for the remainder of 2016 and for the New Year.
</p>



 ]]></description>
  <category>data</category>
  <category>data science</category>
  <category>ggplot2</category>
  <category>R</category>
  <category>RStudio</category>
  <category>visualization</category>
  <guid>https://owenjonesuob.github.io/posts/2016-12-07-30-days-30-visualizations-1-dataset-part-6/</guid>
  <pubDate>Wed, 07 Dec 2016 23:05:34 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2016-12-07-30-days-30-visualizations-1-dataset-part-6/day27.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>30 Days, 30 Visualizations, 1 Dataset: Days 21-25</title>
  <link>https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/</link>
  <description><![CDATA[ 





<h3 class="anchored">
Day 21 (02/12/16): Delay to first upload
</h3>
<p>
Perhaps the DateUploaded column can give us some help in working out why we have duplicate records.
</p>
<p>
Let’s do a similar test to the one from a couple of days ago, to see if the upload time is different for records with the same update time.
</p>
<p>```rdf3 &lt;- filter(df0, Name != “test car park”) %&gt;% group_by(Name, LastUpdate, DateUploaded) %&gt;% filter(n() &gt; 1)</p>
<p>df3<code></code>rconsole## Source: local data frame [0 x 12] ## Groups: Name, LastUpdate, DateUploaded [0] ## ## # … with 12 variables: ID <fctr>, LastUpdate <fctr>, Name <fctr>, ## # Description <fctr>, Capacity <int>, Status <fctr>, Occupancy <int>, ## # Percentage <int>, Easting <int>, Northing <int>, DateUploaded <fctr>, ## # Location <fctr><code>&lt;p&gt;Ah-ha! An empty dataframe! So it looks like the duplicate records are caused by the same record being uploaded at multiple different times.&lt;/p&gt; &lt;p&gt;Let’s take the first upload only, and create a plot similar to yesterday’s.&lt;/p&gt;</code>rdf4 &lt;- df0 %&gt;% select(Name, LastUpdate, DateUploaded) %&gt;% filter(Name != “test car park”) %&gt;% mutate(LastUpdate = as.POSIXct(LastUpdate, tz = “UTC”, format = “%d/%m/%Y %I:%M:%S %p”), DateUploaded = as.POSIXct(DateUploaded, tz = “UTC”, format = “%d/%m/%Y %I:%M:%S %p”)) %&gt;% group_by(Name, LastUpdate) %&gt;% summarize(FirstUpload = min(DateUploaded)) %&gt;% mutate(Delay = as.numeric(FirstUpload - LastUpdate))</fctr></fctr></int></int></int></int></fctr></int></fctr></fctr></fctr></fctr></p>
<p>p &lt;- ggplot(df4, aes(x = Delay)) + geom_histogram(colour = “black”) + facet_wrap(~ Name, nrow = 2, scales = “free”) + ggtitle(“Delay between update and first upload”) + xlab(“Seconds”) + ylab(“Number of records”) + theme(plot.title = element_text(size = rel(1.5))) + scale_y_log10()</p>
p``` <img src="https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/day21.jpeg">
<p>
Note that wherever the histogram displays a bar below the axis, this shows zero records in that bin, since we are using a log scale (and the value shown is therefore log<sub>10</sub>(0) = -Inf); and by similar logic, wherever the histogram shows 0 there is 1 record in that bin (for example, at the extreme right of the Avon Street CP plot).
</p>
<p>
We can see that for most of the car parks, there is a single record at any extreme values (e.g.&nbsp;that 1 record from Avon Street - the largest delay by a huge margin). However, there are multiple dodgy records at Podium CP and the SouthGate CPs.
</p>
<hr>
<h3 class="anchored">
Day 22 (03/12/16): Minute and second of upload
</h3>
<p>
Let’s have a look at when records are uploaded to the online database.
</p>
<p>```rdf3 &lt;- select(df0, Name, DateUploaded) %&gt;% mutate(DateUploaded = as.POSIXct(DateUploaded, tz = “UTC”, format = “%d/%m/%Y %I:%M:%S %p”)) %&gt;% mutate(Minute = minute(DateUploaded), Second = second(DateUploaded))</p>
<p>p1 &lt;- ggplot(df3, aes(x = Minute)) + geom_histogram(binwidth = 1) p2 &lt;- ggplot(df3, aes(x = Second)) + geom_histogram(binwidth = 1)<code>&lt;p&gt;I thought it was time to try out another new package! (Well, new to me…)&lt;/p&gt;</code>rlibrary(grid)</p>
<p>grid.newpage() pushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(0.5, 5), “null”))))</p>
<p>grid.text(“Minute and second of upload”, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2), gp = gpar(fontsize = 22, fontface = 2))</p>
print(p1, vp = viewport(layout.pos.row = 2, layout.pos.col = 1)) print(p2, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))``` <img src="https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/day22.jpeg">
<p>
We can see that records are uploaded promptly every 5 minutes or so, as claimed by the documentation of the database; and that records tend to be uploaded ‘on the minute’.
</p>
<hr>
<h3 class="anchored">
Day 23 (04/12/16): Upload batch sizes and proportions
</h3>
<p>
We saw yesterday that records are uploaded in batches roughly every 5 minutes. But how many records are usually uploaded in one of these batches? And which car parks, if any, “skip” updates?
</p>
<p>```rdf2 &lt;- select(df0, Name, DateUploaded) %&gt;% filter(Name != “test car park”) %&gt;% group_by(DateUploaded) %&gt;% mutate(batch_size = n())</p>
<p>p &lt;- ggplot(df2, aes(x = batch_size))</p>
<p>p1 &lt;- p + geom_bar() + xlab(“Batch size”) + ylab(“Number of batches”) p2 &lt;- p + geom_bar(aes(fill = Name), position = “fill”) + xlab(“Batch size”) + ylab(“Proportion of batches where present”)</p>
library(grid) grid.newpage() pushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(0.5, 5),“null”), widths = unit(c(1, 2), “null”)))) grid.text(“Upload batch sizes and proportions”, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2), gp = gpar(fontsize = 25, fontface = 2)) print(p1, vp = viewport(layout.pos.row = 2, layout.pos.col = 1)) print(p2, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))``` <img src="https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/day23.jpeg">
<p>
So we can see that most batches are of size 8, as expected (these presumably contain one record per car park for each of the 8 car parks), but there are also many smaller batches - some as small as 4 records.
</p>
<p>
We can also see which car parks are contributiong to these smaller batches, and therefore work out which ones <em>aren’t</em> (i.e.&nbsp;the ones skipping updates).
</p>
<hr>
<h3 class="anchored">
Day 24 (05/12/16): Name == “test car park”
</h3>
<p>
With a coursework deadline looming, I am struggling both for time and ideas - bear with me, the next few days may be a little rough…
</p>
<p>
I’ve been filtering out the records from “test car park” for most of the last month. I think it’s high time we had a look at them.
</p>
<p>```rdf2 &lt;- filter(df, Name == “test car park”)</p>
<p>library(scales)</p>
<p>p &lt;- ggplot(df2, aes(x = LastUpdate)) + geom_line(aes(y = Occupancy, colour = “Occupancy”)) + geom_line(aes(y = Capacity, colour = “Capacity”)) + ggtitle(“Test car park records”) + xlab(“Time of update”) + ylab(“Total”) + scale_x_datetime(labels = date_format(“%d/%m/%y”))+ scale_colour_manual(name = ““, values = c(”black”, “red”))</p>
p``` <img src="https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/day24.jpeg">
<p>
Admittedly not particularly interesting or informative, but probably the cleanest and most error-free data we’ve seen so far.
</p>
<hr>
<h3 class="anchored">
Day 25: Calculation of Percentage
</h3>
<p>
There is one more thing I can check about the data: how is the Percentage column calculated? Given that it contains integer values, there must be some rounding involved - perhaps we can see whether values are rounded up or down, or to the nearest integer.
</p>
<p>```rdf4 &lt;- select(df0, LastUpdate, Capacity, Occupancy, Percentage) %&gt;% mutate(newPercentage = (Occupancy / Capacity), Difference = (newPercentage - (Percentage/100)))</p>
<p>p &lt;- ggplot(df4, aes(x = Difference)) + geom_histogram(colour = “black”, bins = 30) + ggtitle(“Difference between (Occupancy/Capacity) and Percentage”)</p>
p``` <img src="https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/day25.jpeg">
<p>
Although not entirely clear, the bulk of the observations lie to the right of zero. It seems, then, that the result of the (Occupancy/Capacity) calculation is rounded down to give the Percentage column.
</p>



 ]]></description>
  <category>data</category>
  <category>data science</category>
  <category>ggplot2</category>
  <category>R</category>
  <category>RStudio</category>
  <category>visualization</category>
  <guid>https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/</guid>
  <pubDate>Fri, 02 Dec 2016 19:45:10 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2016-12-02-30-days-30-visualizations-1-dataset-part-5/day23.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>30 Days, 30 Visualizations, 1 Dataset: Days 16-20</title>
  <link>https://owenjonesuob.github.io/posts/2016-11-27-30-days-30-visualizations-1-dataset-part-4/</link>
  <description><![CDATA[ 





<h3 class="anchored">
Day 16 (27/11/16): Shifting massively negative values
</h3>
<p>
As a culmination of the effort of the last few days, let’s see if the shifted values line up nicely with the unaffected values from that day.
</p>
<p>
I’ll keep my guess of 15220 for the shift <code>k</code> from yesterday for now.
</p>
<p>```rtimerange &lt;- interval(ymd_hms(“2015-01-05 10:00:00”), ymd_hms(“2015-01-05 18:00:00”))</p>
<p>k &lt;- 15220</p>
<p>df2 &lt;- select(df, Name, LastUpdate, Occupancy) %&gt;% filter(Name == “SouthGate General CP”) %&gt;% filter(LastUpdate %within% timerange) %&gt;% arrange(LastUpdate) %&gt;% mutate(newOcc1 = ifelse(Occupancy &lt; -10000, Occupancy + k, Occupancy))<code>&lt;p&gt;I can actually check whether my guess for k is reasonable fairly easily - I’ll find the largest changes in occupancy, and then average them.&lt;/p&gt;</code>rrng &lt;- range(diff(df2$Occupancy)) mean(abs(rng))<code></code>rconsole## [1] 15219.5<code>&lt;p&gt;It turns out my guess was actually very reasonable indeed!&lt;/p&gt; &lt;p&gt;OK, let’s try plotting the corrected occupancies on top of the correct records.&lt;/p&gt;</code>rp &lt;- ggplot(df2, aes(x = LastUpdate, y = newOcc)) + geom_path(aes(colour = (Occupancy &lt; -10000))) + ggtitle(“Adjustment of massively negative occupancies”)</p>
<p>p<code>&lt;img src="day16.jpeg" /&gt; &lt;p&gt;I had hoped that the simple shift would mean the records would line up - but we can see that in fact this is not the case.&lt;/p&gt; &lt;p&gt;Perhaps then, despite the saga of the last few days, it is going to be too much trouble to try to correct these records, and it will be much simpler to just ignore them.&lt;/p&gt; &lt;hr&gt; &lt;h3&gt;Day 17 (28/11/16): Duplicate records&lt;/h3&gt; &lt;p&gt;While working with the massively negative records over the past few days, I noticed something slightly odd.&lt;/p&gt; &lt;p&gt;On occasion, there are two records which are identical - same car park, same occupancy, same time of update. These duplicate records are certainly not helpful, and might affect calculated averages - for example, mean occupancy of a car park over a given week, if this were calculated simply by averaging the occupancy values from all records in that week and if an outlying value were duplicated.&lt;/p&gt; &lt;p&gt;Let’s see where we have duplicate records…&lt;/p&gt;</code>rdf2 &lt;- select(df, Name, LastUpdate) %&gt;% filter(Name != “test car park”) %&gt;% group_by(Name, LastUpdate) %&gt;% summarize(count = n())</p>
<p>p &lt;- ggplot(df2, aes(x = LastUpdate, y = count, colour = Name)) + geom_point() + ggtitle(“Duplicate records”) + ylab(“Number of records”) + theme(plot.title = element_text(size = rel(1.5)))</p>
<p>p<code>&lt;img src="day17.jpeg" /&gt; &lt;p&gt;It turns out that not only are there many, many instances where a record is recorded twice. There are, in fact, a lot of records which are present hundreds of times - one record from Odd Down P+R is present 1145 times!&lt;/p&gt; &lt;hr&gt; &lt;h3&gt;Day 18 (29/11/16): Number of n-plicate records&lt;/h3&gt; &lt;p&gt;Having discovered the slightly worrying number of duplicate records yesterday, I thought I would see how many groups of identical records there are, and how many records are in these groups.&lt;/p&gt;</code>rdf2 &lt;- select(df, Name, LastUpdate) %&gt;% filter(Name != “test car park”) %&gt;% group_by(Name, LastUpdate) %&gt;% summarize(count = n()) %&gt;% group_by(count) %&gt;% summarize(metacount = n(), proportion = metacount / nrow(.))</p>
<p>head(df2)<code></code>rconsole## # A tibble: 6 × 3 ## count metacount proportion ##<br>
## 1 1 1041683 0.8290611487 ## 2 2 211517 0.1683434663 ## 3 3 1072 0.0008531900 ## 4 4 730 0.0005809969 ## 5 5 217 0.0001727073 ## 6 6 185 0.0001472390<code></code>rtail(df2)<code></code>rconsole## # A tibble: 6 × 3 ## count metacount proportion ##<br>
## 1 1069 1 7.958862e-07 ## 2 1087 1 7.958862e-07 ## 3 1089 1 7.958862e-07 ## 4 1130 1 7.958862e-07 ## 5 1143 1 7.958862e-07 ## 6 1145 1 7.958862e-07<code>&lt;p&gt;So the majority of records are only recorded once, but a significant proportion (about 16.8%) of records are recorded twice, and another small subset (around 0.3%) are recorded more than twice - with some recorded over 1000 times, as we saw yesterday!&lt;/p&gt; &lt;p&gt;Let’s try to visualize exactly what we’re dealing with here.&lt;/p&gt;</code>rp &lt;- ggplot(df2[-c(1), ], aes(x = count, y = (metacount + 0.5))) + geom_bar(colour = “black”, stat = “identity”) + scale_y_log10() + ggtitle(“Number of n-plicate records”) + xlab(“Size of group of identical records”) + ylab(“Number of groups”) + theme(plot.title = element_text(size = rel(1.5)))</p>
<p>p<code>&lt;img src="day18.jpeg" /&gt; &lt;p&gt;I’ve had to use a log scale since there are many more size-2-to-12-ish records than most others - but this causes the bars to all but vanish when there is only one group of a particular size. I’ve tried to get around this problem by adding a black border to the bars, so if you look very closely you can just about see them on the x-axis.&lt;/p&gt; &lt;p&gt;Anyway, we can see there are a very large number of groups with a few identical records, as well as a few groups with a very large number of identical records.&lt;/p&gt; &lt;hr&gt; &lt;h3&gt;Day 19 (30/11/16): Times of duplicate uploads&lt;/h3&gt; &lt;p&gt;First I’m just going to make sure that if two records have the same Name and LastUpdate entries, that they are also identical in the other fields - most importantly, Occupancy.&lt;/p&gt;</code>rdf3 &lt;- filter(df, Name != “test car park”) %&gt;% group_by(Name, LastUpdate) %&gt;% filter(n() &gt; 1)</p>
<p>df4 &lt;- filter(df, Name != “test car park”) %&gt;% group_by(Name, LastUpdate, Occupancy) %&gt;% filter(n() &gt; 1)</p>
<p>setdiff(df3, df4)<code></code>rconsole## # A tibble: 0 × 0<code>&lt;p&gt;So there are 0 rows identical in Name and LastUpdate but different in Occupancy. This is a good thing!&lt;/p&gt; &lt;p&gt;We have a dataframe (well, 2 identical dataframes!) containing all the duplicate records. Let’s see if there’s any sort of pattern in the times when duplicates are recorded.&lt;/p&gt;</code>rp &lt;- ggplot(df3, aes(x = LastUpdate, y = ““)) + geom_point(alpha = 0.1) + facet_wrap(~ Name, nrow = 2) + ggtitle(”Times of duplicate uploads”) + ylab(““) + theme(plot.title = element_text(size = rel(1.5)), panel.background = element_blank())</p>
p``` <img src="https://owenjonesuob.github.io/posts/2016-11-27-30-days-30-visualizations-1-dataset-part-4/day19.jpeg">
<p>
We can see that duplicates are recorded almost constantly at the SouthGate car parks, very often at the Odd Down and Lansdown P+Rs and then less frequently but seemingly at random in the other car parks.
</p>
<hr>
<h3 class="anchored">
Day 20 (01/12/16): Delay between update and upload
</h3>
<p>
For the majority of this project I have been working with <code>df</code>, a trimmed-down version of the original dataframe which I created in the first week or so.
</p>
<p>
One of the columns I cut when I created <code>df</code> was <code>DateUploaded</code>: which is, of course, the time when a record was uploaded to the database.
</p>
<p>
Perhaps there are some interesting features to find in this column though…
</p>
<p>
For example, what is the delay in between a record being taken, and it being uploaded?
</p>
<p>```r# Read in the original dataframe again df0 &lt;- read.csv(“C:/Users/Owen/Documents/Coding/Parking/data/BANES_Historic_Car_Park_Occupancy.csv”)</p>
<p>library(dplyr) library(lubridate)</p>
<p>df1 &lt;- df0 %&gt;% select(Name, LastUpdate, DateUploaded) %&gt;% mutate(LastUpdate = as.POSIXct(LastUpdate, tz = “UTC”, format = “%d/%m/%Y %I:%M:%S %p”), DateUploaded = as.POSIXct(DateUploaded, tz = “UTC”, format = “%d/%m/%Y %I:%M:%S %p”)) %&gt;% mutate(Delay = as.numeric(DateUploaded - LastUpdate))</p>
<p>library(ggplot2)</p>
<p>p &lt;- ggplot(df1, aes(x = Delay)) + geom_histogram(colour = “black”, bins = 40) + ggtitle(“Delay between update and upload”) + xlab(“Seconds”) + ylab(“Number of records”)</p>
p<code>&lt;img src="day20.jpeg" /&gt; &lt;p&gt;So the vast majority of the records are uploaded pretty quickly. But there is a suspicious black line along the bottom of the plot…&lt;/p&gt; &lt;p&gt;Let’s replot using a log scale.&lt;/p&gt;</code>rp + scale_y_log10()``` <img class="alignnone size-full wp-image-674" src="https://owenjonesuob.github.io/posts/2016-11-27-30-days-30-visualizations-1-dataset-part-4/day20log.jpeg">
<p>
So we actually have quite a lot of records where the delay between update and upload is fairly large - over 300000 seconds (about 3.5 days) in some cases. There are also a significant number of records which were somehow uploaded BEFORE they were recorded.
</p>



 ]]></description>
  <category>data</category>
  <category>data science</category>
  <category>ggplot2</category>
  <category>R</category>
  <category>RStudio</category>
  <category>visualization</category>
  <guid>https://owenjonesuob.github.io/posts/2016-11-27-30-days-30-visualizations-1-dataset-part-4/</guid>
  <pubDate>Sun, 27 Nov 2016 17:59:45 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2016-11-27-30-days-30-visualizations-1-dataset-part-4/day17.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>30 Days, 30 Visualizations, 1 Dataset: Days 11-15</title>
  <link>https://owenjonesuob.github.io/posts/2016-11-22-30-days-30-visualizations-1-dataset-part-3/</link>
  <description><![CDATA[ 





<h3 class="anchored">
Day 11 (22/11/16): Type of “strange” occupancies
</h3>
<p>
Looking at the dataframe of unusual occupancies from yesterday, I’ll put each record into one of four categories, in order to more easily see which records are definitely wrong, which are questionable, etc.
</p>
<p>```rtype &lt;- vector(“character”, nrow(df3))</p>
<p>type[df3<img src="https://latex.codecogs.com/png.latex?Occupancy%20==%200%5D%20%3C-%20%22Zero%22%0Atype%5Bdf3">Occupancy &lt; 0] &lt;- “Negative” type[df3<img src="https://latex.codecogs.com/png.latex?Occupancy%20==%20df3">Capacity] &lt;- “Full” type[df3<img src="https://latex.codecogs.com/png.latex?Occupancy%20%3E%20df3">Capacity] &lt;- “Overfilled”</p>
<p>df3$Type &lt;- factor(type, levels = c(“Overfilled”, “Full”, “Zero”, “Negative”))</p>
<p>p &lt;- ggplot(df3, aes(x = LastUpdate, y = ““)) + geom_point(aes(colour = Type)) + facet_wrap(~ Name, nrow = 4) + scale_colour_manual(values = rev(c(”red”, “black”, “green”, “blue”))) + ylab(““) + ggtitle(”Type of "Strange" Occupancies”) + theme(plot.title = element_text(size = rel(1.5)))</p>
<p>p<code>&lt;img src="day11.jpeg" /&gt; &lt;p&gt;We can see, for example, that all the definitely-wrong negative-occupancy records are from SouthGate General - maybe the council should look into upgrading the sensors there…&lt;/p&gt; &lt;hr&gt; &lt;h3&gt;Day 12 (23/11/16): Hours of over- and negative occupancy&lt;/h3&gt; &lt;p&gt;We had another Bath ML Meetup tonight - we didn’t have too long to talk about the project, but plans are being made…&lt;/p&gt; &lt;p&gt;Using the dataframe from yesterday, I’ll have a quick look at when the particularly dubious records - the overfilled and negative records, that is - are generally recorded. I’m curious as to whether, for example, overfilled records are more common at lunchtime than overnight.&lt;/p&gt;</code>rdf4 &lt;- filter(df3, Type == “Overfilled” | Type == “Negative”) %&gt;% mutate(Time = hour(LastUpdate) + minute(LastUpdate)/60)</p>
<p>p &lt;- ggplot(df4, aes(x = Time, y = ““)) + geom_point(alpha = 0.01) + facet_wrap(~ Type, nrow = 2) + scale_x_continuous(breaks = seq(0, 24, 4)) + ggtitle(”Hours of over- and negative occupancy”) + ylab(““) + theme(plot.title = element_text(size = rel(1.5)), panel.background = element_blank())</p>
<p>p<code>&lt;img src="day12.jpeg" /&gt; &lt;p&gt;As it turns out, the overfilled records are spread over the whole day, with a decrease only in the early morning. Negative records tend to be from overnight, although there are some during the day too.&lt;/p&gt; &lt;hr&gt; &lt;h3&gt;Day 13 (24/11/16): Spread of negative occupancies&lt;/h3&gt; &lt;p&gt;I’m wondering how the negative occupancies are distributed - we’ve seen that there are some very large negative values, but I’m curious as to how many of these there are, compared to more modest values. My reasoning here is that there are probably a lot of small negative values due to physical, quickly-resolved sensor errors, and then fewer very large negative values due to errors in the uploading of data or some other issue.&lt;/p&gt;</code>rdf4 &lt;- filter(df3, Type == “Negative”)</p>
<section id="having-sneakily-looked-at-plot-already-ill-points-in-certain-ranges" class="level1">
<h1>Having sneakily looked at plot already, I’ll points in certain ranges</h1>
<p>counts &lt;- c(tally(filter(df4, Occupancy &lt; -10000))[2], tally(filter(df4, Occupancy &gt;= -10000, Occupancy &lt;= -1000))[2], tally(filter(df4, Occupancy &gt; -1000))[2]) %&gt;% sapply(sum)</p>
<p>p &lt;- ggplot(df4, aes(y = ““, x = Occupancy)) + geom_point() + ggtitle(”Spread of negative occupancies”) + ylab(““) + annotate(”text”, x = c(-14500, -2000, -100), y = c(rep(1.2, 3)), label = counts)</p>
<p>p<code>&lt;img src="day13.jpeg" /&gt; &lt;hr&gt; &lt;h3&gt;Day 14 (25/11/16): Massively negative occupancies&lt;/h3&gt; &lt;p&gt;Yesterday’s plot revealed a small cluster of points at around -15000. Let’s have a more detailed look at these points, and see if we can work out ‘how’ they are wrong - for example, if they are all the same value, which might suggest it is a deliberate ‘indicator’ value used by the council to denote a closed car park.&lt;/p&gt;</code>rdf4 &lt;- filter(df3, Occupancy &lt; -10000)</p>
<p>summary(df4<img src="https://latex.codecogs.com/png.latex?Name)%60%60%60%0A%60%60%60rconsole##%20%20%20%20%20%20%20Avon%20Street%20CP%20%20Charlotte%20Street%20CP%20%20%20%20%20%20%20%20%20Lansdown%20P+R%0A##%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%0A##%20%20%20%20%20%20%20%20Newbridge%20P+R%20%20%20%20%20%20%20%20%20Odd%20Down%20P+R%20%20%20%20%20%20%20%20%20%20%20%20Podium%20CP%0A##%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%0A##%20SouthGate%20General%20CP%20%20%20%20SouthGate%20Rail%20CP%20%20%20%20%20%20%20%20test%20car%20park%0A##%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2026%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%200%60%60%60%0A%60%60%60rrange(df4">Occupancy)<code></code>rconsole## [1] -14787 -14638<code></code>rtime_length(max(as.double(df4<img src="https://latex.codecogs.com/png.latex?LastUpdate))%20-%20min(as.double(df4">LastUpdate)), unit = “hour”)<code></code>rconsole## [1] 0.02361111<code>&lt;p&gt;So all of the points in this group are from SouthGate General CP, they span a range of values, and they were all recorded within a 2-hour period. Let’s have a look at the trend of these records.&lt;/p&gt;</code>rp &lt;- ggplot(df4, aes(x = LastUpdate, y = Occupancy)) + geom_line() + ggtitle(“SouthGate General CP: Occupancy on 05/01/2015”) + xlab(“Time”)</p>
<p>p<code>&lt;img src="day14.jpeg" /&gt; &lt;p&gt;According to the records, the car park is emptying over this period - but the difference between 13:30 and 15:30 is only around 150 cars, which is a reasonable change over that period of time.&lt;/p&gt; &lt;p&gt;Perhaps there was an unexplained, but precise, shift of -15000ish in the Occupancy records for this brief 2-hour period - in which case the data might be salvageable…&lt;/p&gt; &lt;hr&gt; &lt;h3&gt;Day 15 (26/11/16): Trend of massively negative occupancies&lt;/h3&gt; &lt;p&gt;Let’s see whether the records from that strange Monday afternoon last January follow the trend of records from a typical Monday afternoon.&lt;/p&gt; &lt;p&gt;First I’ll take all the records from Mondays &lt;em&gt;except&lt;/em&gt; for 05/01/2015 between 13:00 and 15:59, and average them out.&lt;/p&gt;</code>rdf2 &lt;- select(df, Name, LastUpdate, Occupancy) %&gt;% filter(Name == “SouthGate General CP”, Occupancy &gt;= 0) %&gt;% filter(wday(LastUpdate) == 2) %&gt;% mutate(Time = update(LastUpdate, year = 1970, month = 1, day = 1)) %&gt;% mutate(Time = round_date(Time, “10 minute”)) %&gt;% filter(hour(Time) == 13 | hour(Time) == 15) %&gt;% group_by(Time) %&gt;% summarize(newOcc = mean(Occupancy)) %&gt;% mutate(Period = “Average”)<code>&lt;p&gt;Now I’ll get the dodgy records from 05/01/2015, shift them by adding a constant to each (initially 15000 - an educated guess), and combine these in a dataframe with the averaged records.&lt;/p&gt;</code>rk &lt;- 15000</p>
<p>df3 &lt;- select(df, LastUpdate, Occupancy) %&gt;% filter(Occupancy &lt; -10000) %&gt;% mutate(Time = update(LastUpdate, year = 1970, month = 1, day = 1)) %&gt;% mutate(newOcc = Occupancy + k) %&gt;% select(Time, newOcc) %&gt;% mutate(Period = “05/01/2015”)</p>
<p>df4 &lt;- rbind(df2, df3)<code>&lt;p&gt;Now let’s plot!&lt;/p&gt;</code>rp &lt;- ggplot(df4, aes(x = Time, y = newOcc)) + geom_line(aes(colour = Period)) + scale_fill_discrete(guide = guide_legend()) + ggtitle(“SouthGate General CP: Adjusted”) + ylab(“Occupancy”) + annotate(“text”, x = (max(df4<img src="https://latex.codecogs.com/png.latex?Time)%20-%201500),%20y%20=%20(min(df4">newOcc) + 80), label = paste0(“Shift: +”, k))</p>
p``` <img src="https://owenjonesuob.github.io/posts/2016-11-22-30-days-30-visualizations-1-dataset-part-3/day15.jpeg">
<p>
We can see that the shifted records do indeed follow the same pattern as the averaged records. A small adjustment to <code>k</code> confirms this.
</p>
<img src="https://owenjonesuob.github.io/posts/2016-11-22-30-days-30-visualizations-1-dataset-part-3/day15_betterk.jpeg">
<p>
Maybe I can find a better value for this constant if I have a look at the records leading up to and away from the massively-negative period…
</p>
<hr>
<p>
On another note:
</p>
<h3 style="text-align:center;" class="anchored" data-anchor-id="having-sneakily-looked-at-plot-already-ill-points-in-certain-ranges">
<strong>WOOOOOOAH, I’M HALFWAY THERE!</strong>
</h3>
<p>
To be completely honest, when I started this project just over 2 weeks ago I didn’t know how I would even get this far without running out of ideas. Here’s hoping I can keep it up for another 15 days!
</p>


</section>

 ]]></description>
  <category>data</category>
  <category>data science</category>
  <category>ggplot2</category>
  <category>R</category>
  <category>RStudio</category>
  <category>visualization</category>
  <guid>https://owenjonesuob.github.io/posts/2016-11-22-30-days-30-visualizations-1-dataset-part-3/</guid>
  <pubDate>Tue, 22 Nov 2016 20:53:53 GMT</pubDate>
  <media:content url="https://owenjonesuob.github.io/posts/2016-11-22-30-days-30-visualizations-1-dataset-part-3/day11.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
